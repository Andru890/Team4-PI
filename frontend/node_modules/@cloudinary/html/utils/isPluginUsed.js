var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var initialPlugins = {
    accessibility: false,
    lazyload: false,
    placeholder: false,
    responsive: false,
};
var getPluginType = function (name) { return name.replace('bound ', '').replace('Plugin', ''); };
export var isPluginUsed = function (plugins, pluginType) {
    if (plugins === void 0) { plugins = []; }
    var usedPlugins = plugins.reduce(function (used, _a) {
        var _b;
        var name = _a.name;
        return (__assign(__assign({}, used), (_b = {}, _b[getPluginType(name)] = true, _b)));
    }, initialPlugins);
    return usedPlugins[pluginType];
};
