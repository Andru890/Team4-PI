{
  "version": 3,
  "sources": ["../../lodash/_baseFilter.js", "../../lodash/filter.js", "../../lodash/isNumber.js", "../../lodash/_arrayEach.js", "../../lodash/_baseAssign.js", "../../lodash/_baseAssignIn.js", "../../lodash/_copySymbols.js", "../../lodash/_getSymbolsIn.js", "../../lodash/_copySymbolsIn.js", "../../lodash/_getAllKeysIn.js", "../../lodash/_initCloneArray.js", "../../lodash/_cloneDataView.js", "../../lodash/_cloneRegExp.js", "../../lodash/_cloneSymbol.js", "../../lodash/_initCloneByTag.js", "../../lodash/_baseIsMap.js", "../../lodash/isMap.js", "../../lodash/_baseIsSet.js", "../../lodash/isSet.js", "../../lodash/_baseClone.js", "../../lodash/_baseSlice.js", "../../lodash/_parent.js", "../../lodash/_baseUnset.js", "../../lodash/_customOmitClone.js", "../../lodash/omit.js", "../../@nivo/annotations/src/props.ts", "../../@nivo/annotations/src/utils.ts", "../../@nivo/annotations/src/compute.ts", "../../@nivo/annotations/src/hooks.ts", "../../@nivo/annotations/src/AnnotationNote.tsx", "../../@nivo/annotations/src/AnnotationLink.tsx", "../../@nivo/annotations/src/CircleAnnotationOutline.tsx", "../../@nivo/annotations/src/DotAnnotationOutline.tsx", "../../@nivo/annotations/src/RectAnnotationOutline.tsx", "../../@nivo/annotations/src/Annotation.tsx", "../../@nivo/annotations/src/canvas.ts", "../../@nivo/bar/src/BarAnnotations.tsx", "../../@nivo/bar/src/BarLegends.tsx", "../../@nivo/bar/src/BarItem.tsx", "../../@nivo/bar/src/BarTooltip.tsx", "../../@nivo/bar/src/props.ts", "../../@nivo/bar/src/compute/common.ts", "../../@nivo/bar/src/compute/grouped.ts", "../../@nivo/bar/src/compute/stacked.ts", "../../@nivo/bar/src/compute/legends.ts", "../../@nivo/bar/src/compute/totals.ts", "../../@nivo/bar/src/hooks.ts", "../../@nivo/bar/src/BarTotals.tsx", "../../@nivo/bar/src/Bar.tsx", "../../@nivo/bar/src/BarCanvas.tsx", "../../@nivo/bar/src/ResponsiveBar.tsx", "../../@nivo/bar/src/ResponsiveBarCanvas.tsx"],
  "sourcesContent": ["var baseEach = require('./_baseEach');\n\n/**\n * The base implementation of `_.filter` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction baseFilter(collection, predicate) {\n  var result = [];\n  baseEach(collection, function(value, index, collection) {\n    if (predicate(value, index, collection)) {\n      result.push(value);\n    }\n  });\n  return result;\n}\n\nmodule.exports = baseFilter;\n", "var arrayFilter = require('./_arrayFilter'),\n    baseFilter = require('./_baseFilter'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray');\n\n/**\n * Iterates over elements of `collection`, returning an array of all elements\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * **Note:** Unlike `_.remove`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see _.reject\n * @example\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': true },\n *   { 'user': 'fred',   'age': 40, 'active': false }\n * ];\n *\n * _.filter(users, function(o) { return !o.active; });\n * // => objects for ['fred']\n *\n * // The `_.matches` iteratee shorthand.\n * _.filter(users, { 'age': 36, 'active': true });\n * // => objects for ['barney']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.filter(users, ['active', false]);\n * // => objects for ['fred']\n *\n * // The `_.property` iteratee shorthand.\n * _.filter(users, 'active');\n * // => objects for ['barney']\n *\n * // Combining several predicates using `_.overEvery` or `_.overSome`.\n * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));\n * // => objects for ['fred', 'barney']\n */\nfunction filter(collection, predicate) {\n  var func = isArray(collection) ? arrayFilter : baseFilter;\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nmodule.exports = filter;\n", "var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar numberTag = '[object Number]';\n\n/**\n * Checks if `value` is classified as a `Number` primitive or object.\n *\n * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n * classified as numbers, use the `_.isFinite` method.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n * @example\n *\n * _.isNumber(3);\n * // => true\n *\n * _.isNumber(Number.MIN_VALUE);\n * // => true\n *\n * _.isNumber(Infinity);\n * // => true\n *\n * _.isNumber('3');\n * // => false\n */\nfunction isNumber(value) {\n  return typeof value == 'number' ||\n    (isObjectLike(value) && baseGetTag(value) == numberTag);\n}\n\nmodule.exports = isNumber;\n", "/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\nmodule.exports = arrayEach;\n", "var copyObject = require('./_copyObject'),\n    keys = require('./keys');\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\nmodule.exports = baseAssign;\n", "var copyObject = require('./_copyObject'),\n    keysIn = require('./keysIn');\n\n/**\n * The base implementation of `_.assignIn` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssignIn(object, source) {\n  return object && copyObject(source, keysIn(source), object);\n}\n\nmodule.exports = baseAssignIn;\n", "var copyObject = require('./_copyObject'),\n    getSymbols = require('./_getSymbols');\n\n/**\n * Copies own symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\nmodule.exports = copySymbols;\n", "var arrayPush = require('./_arrayPush'),\n    getPrototype = require('./_getPrototype'),\n    getSymbols = require('./_getSymbols'),\n    stubArray = require('./stubArray');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own and inherited enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n  var result = [];\n  while (object) {\n    arrayPush(result, getSymbols(object));\n    object = getPrototype(object);\n  }\n  return result;\n};\n\nmodule.exports = getSymbolsIn;\n", "var copyObject = require('./_copyObject'),\n    getSymbolsIn = require('./_getSymbolsIn');\n\n/**\n * Copies own and inherited symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbolsIn(source, object) {\n  return copyObject(source, getSymbolsIn(source), object);\n}\n\nmodule.exports = copySymbolsIn;\n", "var baseGetAllKeys = require('./_baseGetAllKeys'),\n    getSymbolsIn = require('./_getSymbolsIn'),\n    keysIn = require('./keysIn');\n\n/**\n * Creates an array of own and inherited enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeysIn(object) {\n  return baseGetAllKeys(object, keysIn, getSymbolsIn);\n}\n\nmodule.exports = getAllKeysIn;\n", "/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = new array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\nmodule.exports = initCloneArray;\n", "var cloneArrayBuffer = require('./_cloneArrayBuffer');\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\nmodule.exports = cloneDataView;\n", "/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\nmodule.exports = cloneRegExp;\n", "var Symbol = require('./_Symbol');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\nmodule.exports = cloneSymbol;\n", "var cloneArrayBuffer = require('./_cloneArrayBuffer'),\n    cloneDataView = require('./_cloneDataView'),\n    cloneRegExp = require('./_cloneRegExp'),\n    cloneSymbol = require('./_cloneSymbol'),\n    cloneTypedArray = require('./_cloneTypedArray');\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return new Ctor;\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return new Ctor;\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\nmodule.exports = initCloneByTag;\n", "var getTag = require('./_getTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]';\n\n/**\n * The base implementation of `_.isMap` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n */\nfunction baseIsMap(value) {\n  return isObjectLike(value) && getTag(value) == mapTag;\n}\n\nmodule.exports = baseIsMap;\n", "var baseIsMap = require('./_baseIsMap'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsMap = nodeUtil && nodeUtil.isMap;\n\n/**\n * Checks if `value` is classified as a `Map` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n * @example\n *\n * _.isMap(new Map);\n * // => true\n *\n * _.isMap(new WeakMap);\n * // => false\n */\nvar isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\nmodule.exports = isMap;\n", "var getTag = require('./_getTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar setTag = '[object Set]';\n\n/**\n * The base implementation of `_.isSet` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n */\nfunction baseIsSet(value) {\n  return isObjectLike(value) && getTag(value) == setTag;\n}\n\nmodule.exports = baseIsSet;\n", "var baseIsSet = require('./_baseIsSet'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsSet = nodeUtil && nodeUtil.isSet;\n\n/**\n * Checks if `value` is classified as a `Set` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n * @example\n *\n * _.isSet(new Set);\n * // => true\n *\n * _.isSet(new WeakSet);\n * // => false\n */\nvar isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\nmodule.exports = isSet;\n", "var Stack = require('./_Stack'),\n    arrayEach = require('./_arrayEach'),\n    assignValue = require('./_assignValue'),\n    baseAssign = require('./_baseAssign'),\n    baseAssignIn = require('./_baseAssignIn'),\n    cloneBuffer = require('./_cloneBuffer'),\n    copyArray = require('./_copyArray'),\n    copySymbols = require('./_copySymbols'),\n    copySymbolsIn = require('./_copySymbolsIn'),\n    getAllKeys = require('./_getAllKeys'),\n    getAllKeysIn = require('./_getAllKeysIn'),\n    getTag = require('./_getTag'),\n    initCloneArray = require('./_initCloneArray'),\n    initCloneByTag = require('./_initCloneByTag'),\n    initCloneObject = require('./_initCloneObject'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isMap = require('./isMap'),\n    isObject = require('./isObject'),\n    isSet = require('./isSet'),\n    keys = require('./keys'),\n    keysIn = require('./keysIn');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Deep clone\n *  2 - Flatten inherited properties\n *  4 - Clone symbols\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, bitmask, customizer, key, object, stack) {\n  var result,\n      isDeep = bitmask & CLONE_DEEP_FLAG,\n      isFlat = bitmask & CLONE_FLAT_FLAG,\n      isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      result = (isFlat || isFunc) ? {} : initCloneObject(value);\n      if (!isDeep) {\n        return isFlat\n          ? copySymbolsIn(value, baseAssignIn(result, value))\n          : copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (isSet(value)) {\n    value.forEach(function(subValue) {\n      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n    });\n  } else if (isMap(value)) {\n    value.forEach(function(subValue, key) {\n      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n    });\n  }\n\n  var keysFunc = isFull\n    ? (isFlat ? getAllKeysIn : getAllKeys)\n    : (isFlat ? keysIn : keys);\n\n  var props = isArr ? undefined : keysFunc(value);\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n  });\n  return result;\n}\n\nmodule.exports = baseClone;\n", "/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\nmodule.exports = baseSlice;\n", "var baseGet = require('./_baseGet'),\n    baseSlice = require('./_baseSlice');\n\n/**\n * Gets the parent value at `path` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} path The path to get the parent value of.\n * @returns {*} Returns the parent value.\n */\nfunction parent(object, path) {\n  return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));\n}\n\nmodule.exports = parent;\n", "var castPath = require('./_castPath'),\n    last = require('./last'),\n    parent = require('./_parent'),\n    toKey = require('./_toKey');\n\n/**\n * The base implementation of `_.unset`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The property path to unset.\n * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n */\nfunction baseUnset(object, path) {\n  path = castPath(path, object);\n  object = parent(object, path);\n  return object == null || delete object[toKey(last(path))];\n}\n\nmodule.exports = baseUnset;\n", "var isPlainObject = require('./isPlainObject');\n\n/**\n * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain\n * objects.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {string} key The key of the property to inspect.\n * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.\n */\nfunction customOmitClone(value) {\n  return isPlainObject(value) ? undefined : value;\n}\n\nmodule.exports = customOmitClone;\n", "var arrayMap = require('./_arrayMap'),\n    baseClone = require('./_baseClone'),\n    baseUnset = require('./_baseUnset'),\n    castPath = require('./_castPath'),\n    copyObject = require('./_copyObject'),\n    customOmitClone = require('./_customOmitClone'),\n    flatRest = require('./_flatRest'),\n    getAllKeysIn = require('./_getAllKeysIn');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * The opposite of `_.pick`; this method creates an object composed of the\n * own and inherited enumerable property paths of `object` that are not omitted.\n *\n * **Note:** This method is considerably slower than `_.pick`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [paths] The property paths to omit.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.omit(object, ['a', 'c']);\n * // => { 'b': '2' }\n */\nvar omit = flatRest(function(object, paths) {\n  var result = {};\n  if (object == null) {\n    return result;\n  }\n  var isDeep = false;\n  paths = arrayMap(paths, function(path) {\n    path = castPath(path, object);\n    isDeep || (isDeep = path.length > 1);\n    return path;\n  });\n  copyObject(object, getAllKeysIn(object), result);\n  if (isDeep) {\n    result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);\n  }\n  var length = paths.length;\n  while (length--) {\n    baseUnset(result, paths[length]);\n  }\n  return result;\n});\n\nmodule.exports = omit;\n", "export const defaultProps = {\n    dotSize: 4,\n    noteWidth: 120,\n    noteTextOffset: 8,\n    animate: true,\n}\n", "import {\n    AnnotationSpec,\n    CircleAnnotationSpec,\n    DotAnnotationSpec,\n    Note,\n    NoteCanvas,\n    NoteSvg,\n    RectAnnotationSpec,\n} from './types'\nimport { isValidElement } from 'react'\n\nexport const isSvgNote = <Datum>(note: Note<Datum>): note is NoteSvg<Datum> => {\n    const noteType = typeof note\n\n    return (\n        isValidElement(note) ||\n        noteType === 'string' ||\n        noteType === 'function' ||\n        noteType === 'object'\n    )\n}\n\nexport const isCanvasNote = <Datum>(note: Note<Datum>): note is NoteCanvas<Datum> => {\n    const noteType = typeof note\n\n    return noteType === 'string' || noteType === 'function'\n}\n\nexport const isCircleAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is CircleAnnotationSpec<Datum> => annotationSpec.type === 'circle'\n\nexport const isDotAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is DotAnnotationSpec<Datum> => annotationSpec.type === 'dot'\n\nexport const isRectAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is RectAnnotationSpec<Datum> => annotationSpec.type === 'rect'\n", "import filter from 'lodash/filter'\nimport isNumber from 'lodash/isNumber'\nimport omit from 'lodash/omit'\nimport {\n    radiansToDegrees,\n    absoluteAngleDegrees,\n    degreesToRadians,\n    positionFromAngle,\n} from '@nivo/core'\nimport { defaultProps } from './props'\nimport {\n    AnnotationPositionGetter,\n    AnnotationDimensionsGetter,\n    BoundAnnotation,\n    AnnotationMatcher,\n    AnnotationInstructions,\n} from './types'\nimport { isCircleAnnotation, isRectAnnotation } from './utils'\n\nexport const bindAnnotations = <\n    Datum = {\n        x: number\n        y: number\n    }\n>({\n    data,\n    annotations,\n    getPosition,\n    getDimensions,\n}: {\n    data: readonly Datum[]\n    annotations: readonly AnnotationMatcher<Datum>[]\n    getPosition: AnnotationPositionGetter<Datum>\n    getDimensions: AnnotationDimensionsGetter<Datum>\n}): BoundAnnotation<Datum>[] =>\n    annotations.reduce((acc: BoundAnnotation<Datum>[], annotation) => {\n        const offset = annotation.offset || 0\n\n        return [\n            ...acc,\n            ...filter<Datum>(data, annotation.match).map(datum => {\n                const position = getPosition(datum)\n                const dimensions = getDimensions(datum)\n\n                if (isCircleAnnotation(annotation) || isRectAnnotation(annotation)) {\n                    dimensions.size = dimensions.size + offset * 2\n                    dimensions.width = dimensions.width + offset * 2\n                    dimensions.height = dimensions.height + offset * 2\n                }\n\n                // acc.push({\n                //     ...omit(annotation, ['match', 'offset']),\n                //     ...position,\n                //     ...dimensions,\n                //     size: annotation.size || dimensions.size,\n                //     datum,\n                // } as any)\n                // return [\n                //     ...acc,\n                //     {\n                //         ...omit(annotation, ['match', 'offset']),\n                //         ...position,\n                //         ...dimensions,\n                //         size: annotation.size || dimensions.size,\n                //         datum,\n                //     },\n                // ]\n                return {\n                    ...omit(annotation, ['match', 'offset']),\n                    ...position,\n                    ...dimensions,\n                    size: annotation.size || dimensions.size,\n                    datum,\n                } as Required<BoundAnnotation<Datum>>\n            }),\n        ]\n\n        // return acc\n    }, [])\n\nexport const getLinkAngle = (\n    sourceX: number,\n    sourceY: number,\n    targetX: number,\n    targetY: number\n) => {\n    const angle = Math.atan2(targetY - sourceY, targetX - sourceX)\n\n    return absoluteAngleDegrees(radiansToDegrees(angle))\n}\n\nexport const computeAnnotation = <Datum>(\n    annotation: BoundAnnotation<Datum>\n): AnnotationInstructions => {\n    const {\n        x,\n        y,\n        noteX,\n        noteY,\n        noteWidth = defaultProps.noteWidth,\n        noteTextOffset = defaultProps.noteTextOffset,\n    } = annotation\n\n    let computedNoteX: number\n    let computedNoteY: number\n\n    if (isNumber(noteX)) {\n        computedNoteX = x + noteX\n    } else if (noteX.abs !== undefined) {\n        computedNoteX = noteX.abs\n    } else {\n        throw new Error(`noteX should be either a number or an object containing an 'abs' property`)\n    }\n\n    if (isNumber(noteY)) {\n        computedNoteY = y + noteY\n    } else if (noteY.abs !== undefined) {\n        computedNoteY = noteY.abs\n    } else {\n        throw new Error(`noteY should be either a number or an object containing an 'abs' property`)\n    }\n\n    let computedX = x\n    let computedY = y\n\n    const angle = getLinkAngle(x, y, computedNoteX, computedNoteY)\n\n    if (isCircleAnnotation<Datum>(annotation)) {\n        const position = positionFromAngle(degreesToRadians(angle), annotation.size / 2)\n        computedX += position.x\n        computedY += position.y\n    }\n\n    if (isRectAnnotation<Datum>(annotation)) {\n        const eighth = Math.round((angle + 90) / 45) % 8\n        if (eighth === 0) {\n            computedY -= annotation.height / 2\n        }\n        if (eighth === 1) {\n            computedX += annotation.width / 2\n            computedY -= annotation.height / 2\n        }\n        if (eighth === 2) {\n            computedX += annotation.width / 2\n        }\n        if (eighth === 3) {\n            computedX += annotation.width / 2\n            computedY += annotation.height / 2\n        }\n        if (eighth === 4) {\n            computedY += annotation.height / 2\n        }\n        if (eighth === 5) {\n            computedX -= annotation.width / 2\n            computedY += annotation.height / 2\n        }\n        if (eighth === 6) {\n            computedX -= annotation.width / 2\n        }\n        if (eighth === 7) {\n            computedX -= annotation.width / 2\n            computedY -= annotation.height / 2\n        }\n    }\n\n    let textX = computedNoteX\n    const textY = computedNoteY - noteTextOffset\n\n    let noteLineX = computedNoteX\n    const noteLineY = computedNoteY\n\n    if ((angle + 90) % 360 > 180) {\n        textX -= noteWidth\n        noteLineX -= noteWidth\n    } else {\n        noteLineX += noteWidth\n    }\n\n    return {\n        points: [\n            [computedX, computedY],\n            [computedNoteX, computedNoteY],\n            [noteLineX, noteLineY],\n        ] as [number, number][],\n        text: [textX, textY],\n        angle: angle + 90,\n    }\n}\n", "import { useMemo } from 'react'\nimport { bindAnnotations, computeAnnotation } from './compute'\nimport {\n    AnnotationDimensionsGetter,\n    AnnotationMatcher,\n    AnnotationPositionGetter,\n    BoundAnnotation,\n} from './types'\n\n/**\n * Bind annotations to a dataset.\n */\nexport const useAnnotations = <Datum>({\n    data,\n    annotations,\n    getPosition,\n    getDimensions,\n}: {\n    data: readonly Datum[]\n    annotations: readonly AnnotationMatcher<Datum>[]\n    getPosition: AnnotationPositionGetter<Datum>\n    getDimensions: AnnotationDimensionsGetter<Datum>\n}) =>\n    useMemo(\n        () =>\n            bindAnnotations<Datum>({\n                data,\n                annotations,\n                getPosition,\n                getDimensions,\n            }),\n        [data, annotations, getPosition, getDimensions]\n    )\n\nexport const useComputedAnnotations = <Datum>({\n    annotations,\n}: {\n    annotations: readonly BoundAnnotation<Datum>[]\n}) =>\n    useMemo(\n        () =>\n            annotations.map(annotation => ({\n                ...annotation,\n                computed: computeAnnotation<Datum>({\n                    ...annotation,\n                }),\n            })),\n        [annotations]\n    )\n\nexport const useComputedAnnotation = <Datum>(annotation: BoundAnnotation<Datum>) =>\n    useMemo(() => computeAnnotation<Datum>(annotation), [annotation])\n", "import { createElement } from 'react'\nimport omit from 'lodash/omit'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { NoteSvg } from './types'\n\nexport const AnnotationNote = <Datum,>({\n    datum,\n    x,\n    y,\n    note,\n}: {\n    datum: Datum\n    x: number\n    y: number\n    note: NoteSvg<Datum>\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    if (typeof note === 'function') {\n        return createElement(note, { x, y, datum })\n    }\n\n    return (\n        <>\n            {theme.annotations.text.outlineWidth > 0 && (\n                <animated.text\n                    x={animatedProps.x}\n                    y={animatedProps.y}\n                    style={{\n                        ...theme.annotations.text,\n                        strokeLinejoin: 'round',\n                        strokeWidth: theme.annotations.text.outlineWidth * 2,\n                        stroke: theme.annotations.text.outlineColor,\n                    }}\n                >\n                    {note}\n                </animated.text>\n            )}\n            <animated.text\n                x={animatedProps.x}\n                y={animatedProps.y}\n                style={omit(theme.annotations.text, ['outlineWidth', 'outlineColor'])}\n            >\n                {note}\n            </animated.text>\n        </>\n    )\n}\n", "import { useMemo } from 'react'\nimport { animated } from '@react-spring/web'\nimport { useAnimatedPath, useTheme } from '@nivo/core'\n\nexport const AnnotationLink = ({\n    points,\n    isOutline = false,\n}: {\n    points: [number, number][]\n    isOutline?: boolean\n}) => {\n    const theme = useTheme()\n\n    const path = useMemo(() => {\n        const [firstPoint, ...otherPoints] = points\n\n        return otherPoints.reduce(\n            (acc, [x, y]) => `${acc} L${x},${y}`,\n            `M${firstPoint[0]},${firstPoint[1]}`\n        )\n    }, [points])\n\n    const animatedPath = useAnimatedPath(path)\n\n    if (isOutline && theme.annotations.link.outlineWidth <= 0) {\n        return null\n    }\n\n    const style = { ...theme.annotations.link }\n    if (isOutline) {\n        style.strokeLinecap = 'square'\n        style.strokeWidth =\n            theme.annotations.link.strokeWidth + theme.annotations.link.outlineWidth * 2\n        style.stroke = theme.annotations.link.outlineColor\n        style.opacity = theme.annotations.link.outlineOpacity\n    }\n\n    return <animated.path fill=\"none\" d={animatedPath} style={style} />\n}\n", "import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\n\nexport const CircleAnnotationOutline = ({ x, y, size }: { x: number; y: number; size: number }) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        radius: size / 2,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.circle\n                    cx={animatedProps.x}\n                    cy={animatedProps.y}\n                    r={animatedProps.radius}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth:\n                            theme.annotations.outline.strokeWidth +\n                            theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                        opacity: theme.annotations.outline.outlineOpacity,\n                    }}\n                />\n            )}\n            <animated.circle\n                cx={animatedProps.x}\n                cy={animatedProps.y}\n                r={animatedProps.radius}\n                style={theme.annotations.outline}\n            />\n        </>\n    )\n}\n", "import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { defaultProps } from './props'\n\nexport const DotAnnotationOutline = ({\n    x,\n    y,\n    size = defaultProps.dotSize,\n}: {\n    x: number\n    y: number\n    size?: number\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        radius: size / 2,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.circle\n                    cx={animatedProps.x}\n                    cy={animatedProps.y}\n                    r={animatedProps.radius}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth: theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                        opacity: theme.annotations.outline.outlineOpacity,\n                    }}\n                />\n            )}\n            <animated.circle\n                cx={animatedProps.x}\n                cy={animatedProps.y}\n                r={animatedProps.radius}\n                style={theme.annotations.symbol}\n            />\n        </>\n    )\n}\n", "import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\n\nexport const RectAnnotationOutline = ({\n    x,\n    y,\n    width,\n    height,\n    borderRadius = 6,\n}: {\n    x: number\n    y: number\n    width: number\n    height: number\n    borderRadius?: number\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x: x - width / 2,\n        y: y - height / 2,\n        width,\n        height,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.rect\n                    x={animatedProps.x}\n                    y={animatedProps.y}\n                    rx={borderRadius}\n                    ry={borderRadius}\n                    width={animatedProps.width}\n                    height={animatedProps.height}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth:\n                            theme.annotations.outline.strokeWidth +\n                            theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                        opacity: theme.annotations.outline.outlineOpacity,\n                    }}\n                />\n            )}\n            <animated.rect\n                x={animatedProps.x}\n                y={animatedProps.y}\n                rx={borderRadius}\n                ry={borderRadius}\n                width={animatedProps.width}\n                height={animatedProps.height}\n                style={theme.annotations.outline}\n            />\n        </>\n    )\n}\n", "import { useComputedAnnotation } from './hooks'\nimport { AnnotationNote } from './AnnotationNote'\nimport { AnnotationLink } from './AnnotationLink'\nimport { CircleAnnotationOutline } from './CircleAnnotationOutline'\nimport { DotAnnotationOutline } from './DotAnnotationOutline'\nimport { RectAnnotationOutline } from './RectAnnotationOutline'\nimport { BoundAnnotation } from './types'\nimport { isCircleAnnotation, isDotAnnotation, isRectAnnotation, isSvgNote } from './utils'\n\nexport const Annotation = <Datum,>(annotation: BoundAnnotation<Datum>) => {\n    const { datum, x, y, note } = annotation\n    const computed = useComputedAnnotation(annotation)\n\n    if (!isSvgNote(note)) {\n        throw new Error('note should be a valid react element')\n    }\n\n    return (\n        <>\n            <AnnotationLink points={computed.points} isOutline={true} />\n            {isCircleAnnotation(annotation) && (\n                <CircleAnnotationOutline x={x} y={y} size={annotation.size} />\n            )}\n            {isDotAnnotation(annotation) && (\n                <DotAnnotationOutline x={x} y={y} size={annotation.size} />\n            )}\n            {isRectAnnotation(annotation) && (\n                <RectAnnotationOutline\n                    x={x}\n                    y={y}\n                    width={annotation.width}\n                    height={annotation.height}\n                    borderRadius={annotation.borderRadius}\n                />\n            )}\n            <AnnotationLink points={computed.points} />\n            <AnnotationNote datum={datum} x={computed.text[0]} y={computed.text[1]} note={note} />\n        </>\n    )\n}\n", "import { CompleteTheme } from '@nivo/core'\nimport { ComputedAnnotation } from './types'\nimport { isCanvasNote, isCircleAnnotation, isDotAnnotation, isRectAnnotation } from './utils'\n\nconst drawPoints = (ctx: CanvasRenderingContext2D, points: [number, number][]) => {\n    points.forEach(([x, y], index) => {\n        if (index === 0) {\n            ctx.moveTo(x, y)\n        } else {\n            ctx.lineTo(x, y)\n        }\n    })\n}\n\nexport const renderAnnotationsToCanvas = <Datum>(\n    ctx: CanvasRenderingContext2D,\n    {\n        annotations,\n        theme,\n    }: {\n        annotations: ComputedAnnotation<Datum>[]\n        theme: CompleteTheme\n    }\n) => {\n    if (annotations.length === 0) return\n\n    ctx.save()\n    annotations.forEach(annotation => {\n        if (!isCanvasNote(annotation.note)) {\n            throw new Error('note is invalid for canvas implementation')\n        }\n\n        if (theme.annotations.link.outlineWidth > 0) {\n            ctx.lineCap = 'square'\n            ctx.strokeStyle = theme.annotations.link.outlineColor\n            ctx.lineWidth =\n                theme.annotations.link.strokeWidth + theme.annotations.link.outlineWidth * 2\n            ctx.beginPath()\n            drawPoints(ctx, annotation.computed.points)\n            ctx.stroke()\n            ctx.lineCap = 'butt'\n        }\n\n        if (isCircleAnnotation(annotation) && theme.annotations.outline.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.outline.outlineColor\n            ctx.lineWidth =\n                theme.annotations.outline.strokeWidth + theme.annotations.outline.outlineWidth * 2\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isDotAnnotation(annotation) && theme.annotations.symbol.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.symbol.outlineColor\n            ctx.lineWidth = theme.annotations.symbol.outlineWidth * 2\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isRectAnnotation(annotation) && theme.annotations.outline.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.outline.outlineColor\n            ctx.lineWidth =\n                theme.annotations.outline.strokeWidth + theme.annotations.outline.outlineWidth * 2\n            ctx.beginPath()\n            ctx.rect(\n                annotation.x - annotation.width / 2,\n                annotation.y - annotation.height / 2,\n                annotation.width,\n                annotation.height\n            )\n            ctx.stroke()\n        }\n\n        ctx.strokeStyle = theme.annotations.link.stroke\n        ctx.lineWidth = theme.annotations.link.strokeWidth\n        ctx.beginPath()\n        drawPoints(ctx, annotation.computed.points)\n        ctx.stroke()\n\n        if (isCircleAnnotation(annotation)) {\n            ctx.strokeStyle = theme.annotations.outline.stroke\n            ctx.lineWidth = theme.annotations.outline.strokeWidth\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isDotAnnotation(annotation)) {\n            ctx.fillStyle = theme.annotations.symbol.fill\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.fill()\n        }\n\n        if (isRectAnnotation(annotation)) {\n            ctx.strokeStyle = theme.annotations.outline.stroke\n            ctx.lineWidth = theme.annotations.outline.strokeWidth\n            ctx.beginPath()\n            ctx.rect(\n                annotation.x - annotation.width / 2,\n                annotation.y - annotation.height / 2,\n                annotation.width,\n                annotation.height\n            )\n            ctx.stroke()\n        }\n\n        if (typeof annotation.note === 'function') {\n            annotation.note(ctx, {\n                datum: annotation.datum,\n                x: annotation.computed.text[0],\n                y: annotation.computed.text[1],\n                theme,\n            })\n        } else {\n            ctx.font = `${theme.annotations.text.fontSize}px ${theme.annotations.text.fontFamily}`\n            ctx.textAlign = 'left'\n            ctx.textBaseline = 'alphabetic'\n\n            ctx.fillStyle = theme.annotations.text.fill\n            ctx.strokeStyle = theme.annotations.text.outlineColor\n            ctx.lineWidth = theme.annotations.text.outlineWidth * 2\n\n            if (theme.annotations.text.outlineWidth > 0) {\n                ctx.lineJoin = 'round'\n                ctx.strokeText(\n                    annotation.note,\n                    annotation.computed.text[0],\n                    annotation.computed.text[1]\n                )\n                ctx.lineJoin = 'miter'\n            }\n            ctx.fillText(annotation.note, annotation.computed.text[0], annotation.computed.text[1])\n        }\n    })\n    ctx.restore()\n}\n", "import { Annotation, useAnnotations } from '@nivo/annotations'\nimport { BarAnnotationsProps } from './types'\n\nexport const BarAnnotations = <RawDatum,>({ bars, annotations }: BarAnnotationsProps<RawDatum>) => {\n    const boundAnnotations = useAnnotations({\n        data: bars,\n        annotations,\n        getPosition: bar => ({\n            x: bar.x + bar.width / 2,\n            y: bar.y + bar.height / 2,\n        }),\n        getDimensions: ({ height, width }) => ({\n            width,\n            height,\n            size: Math.max(width, height),\n        }),\n    })\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n", "import { BoxLegendSvg } from '@nivo/legends'\nimport { BarLegendProps, LegendData } from './types'\n\ninterface BarLegendsProps {\n    width: number\n    height: number\n    legends: [BarLegendProps, LegendData[]][]\n    toggleSerie: (id: string | number) => void\n}\n\nexport const BarLegends = ({ width, height, legends, toggleSerie }: BarLegendsProps) => (\n    <>\n        {legends.map(([legend, data], i) => (\n            <BoxLegendSvg\n                key={i}\n                {...legend}\n                containerWidth={width}\n                containerHeight={height}\n                data={legend.data ?? data}\n                toggleSerie={\n                    legend.toggleSerie && legend.dataFrom === 'keys' ? toggleSerie : undefined\n                }\n            />\n        ))}\n    </>\n)\n", "import { createElement, MouseEvent, useCallback, useMemo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { BarDatum, BarItemProps } from './types'\n\nexport const BarItem = <RawDatum extends BarDatum>({\n    bar: { data, ...bar },\n\n    style: {\n        borderColor,\n        color,\n        height,\n        labelColor,\n        labelOpacity,\n        labelX,\n        labelY,\n        transform,\n        width,\n    },\n\n    borderRadius,\n    borderWidth,\n\n    label,\n    shouldRenderLabel,\n\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    tooltip,\n\n    isFocusable,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: BarItemProps<RawDatum>) => {\n    const theme = useTheme()\n    const { showTooltipFromEvent, showTooltipAt, hideTooltip } = useTooltip()\n\n    const renderTooltip = useMemo(\n        () => () => createElement(tooltip, { ...bar, ...data }),\n        [tooltip, bar, data]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onClick?.({ color: bar.color, ...data }, event)\n        },\n        [bar, data, onClick]\n    )\n    const handleTooltip = useCallback(\n        (event: MouseEvent<SVGRectElement>) => showTooltipFromEvent(renderTooltip(), event),\n        [showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseEnter?.(data, event)\n            showTooltipFromEvent(renderTooltip(), event)\n        },\n        [data, onMouseEnter, showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseLeave?.(data, event)\n            hideTooltip()\n        },\n        [data, hideTooltip, onMouseLeave]\n    )\n\n    // extra handlers to allow keyboard navigation\n    const handleFocus = useCallback(() => {\n        showTooltipAt(renderTooltip(), [bar.absX + bar.width / 2, bar.absY])\n    }, [showTooltipAt, renderTooltip, bar])\n    const handleBlur = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    return (\n        <animated.g transform={transform}>\n            <animated.rect\n                width={to(width, value => Math.max(value, 0))}\n                height={to(height, value => Math.max(value, 0))}\n                rx={borderRadius}\n                ry={borderRadius}\n                fill={data.fill ?? color}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                focusable={isFocusable}\n                tabIndex={isFocusable ? 0 : undefined}\n                aria-label={ariaLabel ? ariaLabel(data) : undefined}\n                aria-labelledby={ariaLabelledBy ? ariaLabelledBy(data) : undefined}\n                aria-describedby={ariaDescribedBy ? ariaDescribedBy(data) : undefined}\n                onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n                onMouseMove={isInteractive ? handleTooltip : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n                onFocus={isInteractive && isFocusable ? handleFocus : undefined}\n                onBlur={isInteractive && isFocusable ? handleBlur : undefined}\n            />\n            {shouldRenderLabel && (\n                <animated.text\n                    x={labelX}\n                    y={labelY}\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"central\"\n                    fillOpacity={labelOpacity}\n                    style={{\n                        ...theme.labels.text,\n                        pointerEvents: 'none',\n                        fill: labelColor,\n                    }}\n                >\n                    {label}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n", "import { BarTooltipProps } from './types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nexport const BarTooltip = <RawDatum,>({ color, label, ...data }: BarTooltipProps<RawDatum>) => {\n    return <BasicTooltip id={label} value={data.formattedValue} enableChip={true} color={color} />\n}\n", "import { BarItem } from './BarItem'\nimport { BarTooltip } from './BarTooltip'\nimport { BarCanvasLayerId, BarLayerId, ComputedDatum } from './types'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { ScaleBandSpec, ScaleSpec } from '@nivo/scales'\n\nexport const defaultProps = {\n    indexBy: 'id',\n    keys: ['value'],\n\n    groupMode: 'stacked' as const,\n    layout: 'vertical' as const,\n    reverse: false,\n\n    minValue: 'auto' as const,\n    maxValue: 'auto' as const,\n\n    valueScale: { type: 'linear' } as ScaleSpec,\n    indexScale: { type: 'band', round: true } as ScaleBandSpec,\n\n    padding: 0.1,\n    innerPadding: 0,\n\n    axisBottom: {},\n    axisLeft: {},\n    enableGridX: false,\n    enableGridY: true,\n\n    enableLabel: true,\n    label: 'formattedValue',\n    labelSkipWidth: 0,\n    labelSkipHeight: 0,\n    labelTextColor: { from: 'theme', theme: 'labels.text.fill' },\n\n    colorBy: 'id' as const,\n    colors: { scheme: 'nivo' } as OrdinalColorScaleConfig,\n\n    borderRadius: 0,\n    borderWidth: 0,\n    borderColor: { from: 'color' } as InheritedColorConfig<any>,\n\n    isInteractive: true,\n    tooltip: BarTooltip,\n    tooltipLabel: <RawDatum>(datum: ComputedDatum<RawDatum>) => `${datum.id} - ${datum.indexValue}`,\n\n    legends: [],\n    initialHiddenIds: [],\n    annotations: [],\n    markers: [],\n\n    enableTotals: false,\n    totalsOffset: 10,\n}\n\nexport const svgDefaultProps = {\n    ...defaultProps,\n    layers: ['grid', 'axes', 'bars', 'totals', 'markers', 'legends', 'annotations'] as BarLayerId[],\n    barComponent: BarItem,\n\n    defs: [],\n    fill: [],\n\n    animate: true,\n    motionConfig: 'default',\n\n    role: 'img',\n    isFocusable: false,\n}\n\nexport const canvasDefaultProps = {\n    ...defaultProps,\n    layers: ['grid', 'axes', 'bars', 'totals', 'legends', 'annotations'] as BarCanvasLayerId[],\n\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio ?? 1 : 1,\n}\n", "import { ScaleBandSpec, ScaleBand, computeScale } from '@nivo/scales'\n\n/**\n * Generates indexed scale.\n */\nexport const getIndexScale = <RawDatum>(\n    data: readonly RawDatum[],\n    getIndex: (datum: RawDatum) => string,\n    padding: number,\n    indexScale: ScaleBandSpec,\n    size: number,\n    axis: 'x' | 'y'\n) => {\n    return (\n        computeScale(\n            indexScale,\n            { all: data.map(getIndex), min: 0, max: 0 },\n            size,\n            axis\n        ) as ScaleBand<string>\n    ).padding(padding)\n}\n\n/**\n * This method ensures all the provided keys exist in the entire series.\n */\nexport const normalizeData = <RawDatum>(data: readonly RawDatum[], keys: readonly string[]) =>\n    data.map(\n        item =>\n            ({\n                ...keys.reduce<Record<string, unknown>>((acc, key) => {\n                    acc[key] = null\n                    return acc\n                }, {}),\n                ...item,\n            } as RawDatum)\n    )\n\nexport const filterNullValues = <RawDatum extends Record<string, unknown>>(data: RawDatum) =>\n    Object.keys(data).reduce<Record<string, unknown>>((acc, key) => {\n        if (data[key]) {\n            acc[key] = data[key]\n        }\n        return acc\n    }, {}) as Exclude<RawDatum, null | undefined | false | '' | 0>\n\nexport const coerceValue = <T>(value: T) => [value, Number(value)] as const\n", "import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    data: readonly RawDatum[]\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    keys: string[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst gt = (value: number, other: number) => value > other\nconst lt = (value: number, other: number) => value < other\n\nconst range = (start: number, end: number) =>\n    Array.from(' '.repeat(end - start), (_, index) => start + index)\n\nconst clampToZero = (value: number) => (gt(value, 0) ? 0 : value)\nconst zeroIfNotFinite = (value: number) => (isFinite(value) ? value : 0)\n\n/**\n * Generates x/y scales & bars for vertical grouped bar chart.\n */\nconst generateVerticalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding = 0,\n        keys,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean,\n    yRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getY = (d: number) => (compare(d, 0) ? yScale(d) ?? 0 : yRef)\n    const getHeight = (d: number, y: number) => (compare(d, 0) ? yRef - y : (yScale(d) ?? 0) - yRef)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, xScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = (xScale(indexValue) ?? 0) + barWidth * i + innerPadding * i\n            const y = getY(value)\n            const barHeight = getHeight(value, y)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal grouped bar chart.\n */\nconst generateHorizontalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getIndex,\n        getColor,\n        getTooltipLabel,\n        keys,\n        innerPadding = 0,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean,\n    xRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getX = (d: number) => (compare(d, 0) ? xRef : xScale(d) ?? 0)\n    const getWidth = (d: number, x: number) => (compare(d, 0) ? (xScale(d) ?? 0) - xRef : xRef - x)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, yScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = getX(value)\n            const y = (yScale(indexValue) ?? 0) + barHeight * i + innerPadding * i\n            const barWidth = getWidth(value, x)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for grouped bar chart.\n */\nexport const generateGroupedBars = <RawDatum extends BarDatum>({\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    innerPadding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: readonly (string | number)[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const data = normalizeData(props.data, keys)\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const clampMin = scaleSpec.min === 'auto' ? clampToZero : (value: number) => value\n\n    const values = data\n        .reduce<number[]>((acc, entry) => [...acc, ...keys.map(k => entry[k] as number)], [])\n        .filter(Boolean)\n    const min = clampMin(Math.min(...values))\n    const max = zeroIfNotFinite(Math.max(...values))\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const bandwidth = (indexScale.bandwidth() - innerPadding * (keys.length - 1)) / keys.length\n    const params = [\n        { ...props, data, keys, innerPadding, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n        scale(0) ?? 0,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalGroupedBars(...params)\n                : generateHorizontalGroupedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n", "import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { Series, SeriesPoint, stack, stackOffsetDiverging } from 'd3-shape'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype StackDatum<RawDatum> = SeriesPoint<RawDatum>\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    stackedData: Series<RawDatum, string>[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst flattenDeep = <T>(arr: T[]): T =>\n    arr.some(Array.isArray) ? flattenDeep(([] as T[]).concat(...arr)) : (arr as unknown as T)\n\nconst filterZerosIfLog = (array: number[], type: string) =>\n    type === 'log' ? array.filter(num => num !== 0) : array\n\n/**\n * Generates x/y scales & bars for vertical stacked bar chart.\n */\nconst generateVerticalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getY = (d: StackDatum<RawDatum>) => yScale(d[reverse ? 0 : 1])\n    const getHeight = (d: StackDatum<RawDatum>, y: number) => (yScale(d[reverse ? 1 : 0]) ?? 0) - y\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        xScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const x = xScale(getIndex(d.data)) ?? 0\n            const y = (getY(d) ?? 0) + innerPadding * 0.5\n            const barHeight = getHeight(d, y) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal stacked bar chart.\n */\nconst generateHorizontalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getX = (d: StackDatum<RawDatum>) => xScale(d[reverse ? 1 : 0])\n    const getWidth = (d: StackDatum<RawDatum>, x: number) => (xScale(d[reverse ? 0 : 1]) ?? 0) - x\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        yScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const y = yScale(getIndex(d.data)) ?? 0\n            const x = (getX(d) ?? 0) + innerPadding * 0.5\n            const barWidth = getWidth(d, x) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for stacked bar chart.\n */\nexport const generateStackedBars = <RawDatum extends BarDatum>({\n    data,\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: readonly (string | number)[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const stackedData = stack<RawDatum, string>().keys(keys).offset(stackOffsetDiverging)(\n        normalizeData(data, keys)\n    )\n\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const values = filterZerosIfLog(\n        flattenDeep(stackedData as unknown as number[][]),\n        valueScale.type\n    )\n    const min = Math.min(...values)\n    const max = Math.max(...values)\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const innerPadding = props.innerPadding > 0 ? props.innerPadding : 0\n    const bandwidth = indexScale.bandwidth()\n    const params = [\n        { ...props, innerPadding, stackedData, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalStackedBars(...params)\n                : generateHorizontalStackedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n", "import {\n    BarDatum,\n    BarLegendProps,\n    BarSvgProps,\n    BarsWithHidden,\n    LegendData,\n    LegendLabelDatum,\n} from '../types'\nimport { getPropertyAccessor } from '@nivo/core'\nimport uniqBy from 'lodash/uniqBy'\n\nexport const getLegendDataForKeys = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    direction: BarLegendProps['direction'],\n    groupMode: NonNullable<BarSvgProps<RawDatum>['groupMode']>,\n    reverse: boolean,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.id,\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (\n        (layout === 'vertical' &&\n            groupMode === 'stacked' &&\n            direction === 'column' &&\n            reverse !== true) ||\n        (layout === 'horizontal' && groupMode === 'stacked' && reverse === true)\n    ) {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendDataForIndexes = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.indexValue ?? '',\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (layout === 'horizontal') {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendData = <RawDatum extends BarDatum>({\n    bars,\n    direction,\n    from,\n    groupMode,\n    layout,\n    legendLabel,\n    reverse,\n}: Pick<Required<BarSvgProps<RawDatum>>, 'layout' | 'groupMode' | 'reverse'> & {\n    bars: BarsWithHidden<RawDatum>\n    direction: BarLegendProps['direction']\n    from: BarLegendProps['dataFrom']\n    legendLabel: BarSvgProps<RawDatum>['legendLabel']\n}) => {\n    const getLegendLabel = getPropertyAccessor(\n        legendLabel ?? (from === 'indexes' ? 'indexValue' : 'id')\n    )\n\n    if (from === 'indexes') {\n        return getLegendDataForIndexes(bars, layout, getLegendLabel)\n    }\n\n    return getLegendDataForKeys(bars, layout, direction, groupMode, reverse, getLegendLabel)\n}\n", "import { AnyScale, ScaleBand } from '@nivo/scales'\nimport { defaultProps } from '../props'\nimport { BarCommonProps, BarDatum, ComputedBarDatum } from '../types'\n\nexport interface BarTotalsData {\n    key: string\n    x: number\n    y: number\n    value: number\n    formattedValue: string\n    animationOffset: number\n}\n\nexport const computeBarTotals = <RawDatum extends BarDatum>(\n    bars: ComputedBarDatum<RawDatum>[],\n    xScale: ScaleBand<string> | AnyScale,\n    yScale: ScaleBand<string> | AnyScale,\n    layout: BarCommonProps<RawDatum>['layout'] = defaultProps.layout,\n    groupMode: BarCommonProps<RawDatum>['groupMode'] = defaultProps.groupMode,\n    totalsOffset: number,\n    formatValue: (value: number) => string\n) => {\n    const totals = [] as BarTotalsData[]\n\n    if (bars.length === 0) return totals\n\n    const totalsByIndex = new Map<string | number, number>()\n\n    const barWidth = bars[0].width\n    const barHeight = bars[0].height\n\n    if (groupMode === 'stacked') {\n        const totalsPositivesByIndex = new Map<string | number, number>()\n\n        bars.forEach(bar => {\n            const { indexValue, value } = bar.data\n            updateTotalsByIndex(totalsByIndex, indexValue, Number(value))\n            updateTotalsPositivesByIndex(totalsPositivesByIndex, indexValue, Number(value))\n        })\n\n        totalsPositivesByIndex.forEach((totalsPositive, indexValue) => {\n            const indexTotal = totalsByIndex.get(indexValue) || 0\n\n            let xPosition: number\n            let yPosition: number\n            let animationOffset: number\n\n            if (layout === 'vertical') {\n                xPosition = xScale(indexValue)\n                yPosition = yScale(totalsPositive)\n                animationOffset = yScale(totalsPositive / 2)\n            } else {\n                xPosition = xScale(totalsPositive)\n                yPosition = yScale(indexValue)\n                animationOffset = xScale(totalsPositive / 2)\n            }\n\n            xPosition += layout === 'vertical' ? barWidth / 2 : totalsOffset\n            yPosition += layout === 'vertical' ? -totalsOffset : barHeight / 2\n\n            totals.push({\n                key: 'total_' + indexValue,\n                x: xPosition,\n                y: yPosition,\n                value: indexTotal,\n                formattedValue: formatValue(indexTotal),\n                animationOffset,\n            })\n        })\n    } else if (groupMode === 'grouped') {\n        const greatestValueByIndex = new Map<string | number, number>()\n        const numberOfBarsByIndex = new Map()\n\n        bars.forEach(bar => {\n            const { indexValue, value } = bar.data\n            updateTotalsByIndex(totalsByIndex, indexValue, Number(value))\n            updateGreatestValueByIndex(greatestValueByIndex, indexValue, Number(value))\n            updateNumberOfBarsByIndex(numberOfBarsByIndex, indexValue)\n        })\n\n        greatestValueByIndex.forEach((greatestValue, indexValue) => {\n            const indexTotal = totalsByIndex.get(indexValue) || 0\n            const numberOfBars = numberOfBarsByIndex.get(indexValue)\n\n            let xPosition: number\n            let yPosition: number\n            let animationOffset: number\n\n            if (layout === 'vertical') {\n                xPosition = xScale(indexValue)\n                yPosition = yScale(greatestValue)\n                animationOffset = yScale(greatestValue / 2)\n            } else {\n                xPosition = xScale(greatestValue)\n                yPosition = yScale(indexValue)\n                animationOffset = xScale(greatestValue / 2)\n            }\n\n            const indexBarsWidth = numberOfBars * barWidth\n            const indexBarsHeight = numberOfBars * barHeight\n\n            xPosition += layout === 'vertical' ? indexBarsWidth / 2 : totalsOffset\n            yPosition += layout === 'vertical' ? -totalsOffset : indexBarsHeight / 2\n\n            totals.push({\n                key: 'total_' + indexValue,\n                x: xPosition,\n                y: yPosition,\n                value: indexTotal,\n                formattedValue: formatValue(indexTotal),\n                animationOffset,\n            })\n        })\n    }\n    return totals\n}\n\n// this function is used to compute the total value for the indexes. The total value is later rendered on the chart\nexport const updateTotalsByIndex = (\n    totalsByIndex: Map<string | number, number>,\n    indexValue: string | number,\n    value: number\n) => {\n    const currentIndexValue = totalsByIndex.get(indexValue) || 0\n    totalsByIndex.set(indexValue, currentIndexValue + value)\n}\n\n// this function is used to compute only the positive values of the indexes. Useful to position the text right above the last stacked bar. It prevents overlapping in case of negative values\nexport const updateTotalsPositivesByIndex = (\n    totalsPositivesByIndex: Map<string | number, number>,\n    indexValue: string | number,\n    value: number\n) => {\n    const currentIndexValue = totalsPositivesByIndex.get(indexValue) || 0\n    totalsPositivesByIndex.set(indexValue, currentIndexValue + (value > 0 ? value : 0))\n}\n\n// this function is used to keep track of the highest value for the indexes. Useful to position the text above the longest grouped bar\nexport const updateGreatestValueByIndex = (\n    greatestValueByIndex: Map<string | number, number>,\n    indexValue: string | number,\n    value: number\n) => {\n    const currentGreatestValue = greatestValueByIndex.get(indexValue) || 0\n    greatestValueByIndex.set(indexValue, Math.max(currentGreatestValue, Number(value)))\n}\n\n// this function is used to save the number of bars for the indexes. Useful to position the text in the middle of the grouped bars\nexport const updateNumberOfBarsByIndex = (\n    numberOfBarsByIndex: Map<string | number, number>,\n    indexValue: string | number\n) => {\n    const currentNumberOfBars = numberOfBarsByIndex.get(indexValue) || 0\n    numberOfBarsByIndex.set(indexValue, currentNumberOfBars + 1)\n}\n", "import { useCallback, useMemo, useState } from 'react'\nimport { useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport { usePropertyAccessor, useTheme, useValueFormatter, Margin } from '@nivo/core'\nimport {\n    DataProps,\n    BarCommonProps,\n    BarDatum,\n    ComputedBarDatumWithValue,\n    LegendData,\n    BarLegendProps,\n} from './types'\nimport { defaultProps } from './props'\nimport { generateGroupedBars, generateStackedBars, getLegendData } from './compute'\nimport { computeBarTotals } from './compute/totals'\n\nexport const useBar = <RawDatum extends BarDatum>({\n    indexBy = defaultProps.indexBy,\n    keys = defaultProps.keys,\n    label = defaultProps.label,\n    tooltipLabel = defaultProps.tooltipLabel,\n    valueFormat,\n    colors = defaultProps.colors,\n    colorBy = defaultProps.colorBy,\n    borderColor = defaultProps.borderColor,\n    labelTextColor = defaultProps.labelTextColor,\n    groupMode = defaultProps.groupMode,\n    layout = defaultProps.layout,\n    reverse = defaultProps.reverse,\n    data,\n    minValue = defaultProps.minValue,\n    maxValue = defaultProps.maxValue,\n    margin,\n    width,\n    height,\n    padding = defaultProps.padding,\n    innerPadding = defaultProps.innerPadding,\n    valueScale = defaultProps.valueScale,\n    indexScale = defaultProps.indexScale,\n    initialHiddenIds = defaultProps.initialHiddenIds,\n    enableLabel = defaultProps.enableLabel,\n    labelSkipWidth = defaultProps.labelSkipWidth,\n    labelSkipHeight = defaultProps.labelSkipHeight,\n    legends = defaultProps.legends,\n    legendLabel,\n    totalsOffset = defaultProps.totalsOffset,\n}: {\n    indexBy?: BarCommonProps<RawDatum>['indexBy']\n    label?: BarCommonProps<RawDatum>['label']\n    tooltipLabel?: BarCommonProps<RawDatum>['tooltipLabel']\n    valueFormat?: BarCommonProps<RawDatum>['valueFormat']\n    colors?: BarCommonProps<RawDatum>['colors']\n    colorBy?: BarCommonProps<RawDatum>['colorBy']\n    borderColor?: BarCommonProps<RawDatum>['borderColor']\n    labelTextColor?: BarCommonProps<RawDatum>['labelTextColor']\n    groupMode?: BarCommonProps<RawDatum>['groupMode']\n    layout?: BarCommonProps<RawDatum>['layout']\n    reverse?: BarCommonProps<RawDatum>['reverse']\n    data: DataProps<RawDatum>['data']\n    keys?: BarCommonProps<RawDatum>['keys']\n    minValue?: BarCommonProps<RawDatum>['minValue']\n    maxValue?: BarCommonProps<RawDatum>['maxValue']\n    margin: Margin\n    width: number\n    height: number\n    padding?: BarCommonProps<RawDatum>['padding']\n    innerPadding?: BarCommonProps<RawDatum>['innerPadding']\n    valueScale?: BarCommonProps<RawDatum>['valueScale']\n    indexScale?: BarCommonProps<RawDatum>['indexScale']\n    initialHiddenIds?: BarCommonProps<RawDatum>['initialHiddenIds']\n    enableLabel?: BarCommonProps<RawDatum>['enableLabel']\n    labelSkipWidth?: BarCommonProps<RawDatum>['labelSkipWidth']\n    labelSkipHeight?: BarCommonProps<RawDatum>['labelSkipHeight']\n    legends?: BarCommonProps<RawDatum>['legends']\n    legendLabel?: BarCommonProps<RawDatum>['legendLabel']\n    totalsOffset?: BarCommonProps<RawDatum>['totalsOffset']\n}) => {\n    const [hiddenIds, setHiddenIds] = useState(initialHiddenIds ?? [])\n    const toggleSerie = useCallback((id: string | number) => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const getIndex = usePropertyAccessor(indexBy)\n    const getLabel = usePropertyAccessor(label)\n    const getTooltipLabel = usePropertyAccessor(tooltipLabel)\n    const formatValue = useValueFormatter(valueFormat)\n\n    const theme = useTheme()\n    const getColor = useOrdinalColorScale(colors, colorBy)\n    const getBorderColor = useInheritedColor<ComputedBarDatumWithValue<RawDatum>>(\n        borderColor,\n        theme\n    )\n    const getLabelColor = useInheritedColor<ComputedBarDatumWithValue<RawDatum>>(\n        labelTextColor,\n        theme\n    )\n\n    const generateBars = groupMode === 'grouped' ? generateGroupedBars : generateStackedBars\n    const { bars, xScale, yScale } = generateBars({\n        layout,\n        reverse,\n        data,\n        getIndex,\n        keys,\n        minValue,\n        maxValue,\n        width,\n        height,\n        getColor,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        hiddenIds,\n        formatValue,\n        getTooltipLabel,\n        margin,\n    })\n\n    const barsWithValue = useMemo(\n        () =>\n            bars\n                .filter(\n                    (bar): bar is ComputedBarDatumWithValue<RawDatum> => bar.data.value !== null\n                )\n                .map((bar, index) => ({\n                    ...bar,\n                    index,\n                })),\n        [bars]\n    )\n\n    const shouldRenderBarLabel = useCallback(\n        ({ width, height }: { height: number; width: number }) => {\n            if (!enableLabel) return false\n            if (labelSkipWidth > 0 && width < labelSkipWidth) return false\n            if (labelSkipHeight > 0 && height < labelSkipHeight) return false\n            return true\n        },\n        [enableLabel, labelSkipWidth, labelSkipHeight]\n    )\n\n    const legendData = useMemo(\n        () =>\n            keys.map(key => {\n                const bar = bars.find(bar => bar.data.id === key)\n\n                return { ...bar, data: { id: key, ...bar?.data, hidden: hiddenIds.includes(key) } }\n            }),\n        [hiddenIds, keys, bars]\n    )\n\n    const legendsWithData: [BarLegendProps, LegendData[]][] = useMemo(\n        () =>\n            legends.map(legend => {\n                const data = getLegendData({\n                    bars: legend.dataFrom === 'keys' ? legendData : bars,\n                    direction: legend.direction,\n                    from: legend.dataFrom,\n                    groupMode,\n                    layout,\n                    legendLabel,\n                    reverse,\n                })\n\n                return [legend, data]\n            }),\n        [legends, legendData, bars, groupMode, layout, legendLabel, reverse]\n    )\n\n    const barTotals = useMemo(\n        () => computeBarTotals(bars, xScale, yScale, layout, groupMode, totalsOffset, formatValue),\n        [bars, xScale, yScale, layout, groupMode, totalsOffset, formatValue]\n    )\n\n    return {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getIndex,\n        getLabel,\n        getTooltipLabel,\n        formatValue,\n        getColor,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        hiddenIds,\n        toggleSerie,\n        legendsWithData,\n        barTotals,\n    }\n}\n", "import { useTheme } from '@nivo/core'\nimport { AnimationConfig, animated, useTransition } from '@react-spring/web'\nimport { BarCommonProps, BarDatum } from './types'\nimport { svgDefaultProps } from './props'\nimport { BarTotalsData } from './compute/totals'\n\ninterface Props<RawDatum extends BarDatum> {\n    data: BarTotalsData[]\n    springConfig: Partial<AnimationConfig>\n    animate: boolean\n    layout?: BarCommonProps<RawDatum>['layout']\n}\n\nexport const BarTotals = <RawDatum extends BarDatum>({\n    data,\n    springConfig,\n    animate,\n    layout = svgDefaultProps.layout,\n}: Props<RawDatum>) => {\n    const theme = useTheme()\n    const totalsTransition = useTransition<\n        BarTotalsData,\n        {\n            x: number\n            y: number\n            labelOpacity: number\n        }\n    >(data, {\n        keys: barTotal => barTotal.key,\n        from: barTotal => ({\n            x: layout === 'vertical' ? barTotal.x : barTotal.animationOffset,\n            y: layout === 'vertical' ? barTotal.animationOffset : barTotal.y,\n            labelOpacity: 0,\n        }),\n        enter: barTotal => ({\n            x: barTotal.x,\n            y: barTotal.y,\n            labelOpacity: 1,\n        }),\n        update: barTotal => ({\n            x: barTotal.x,\n            y: barTotal.y,\n            labelOpacity: 1,\n        }),\n        leave: barTotal => ({\n            x: layout === 'vertical' ? barTotal.x : barTotal.animationOffset,\n            y: layout === 'vertical' ? barTotal.animationOffset : barTotal.y,\n            labelOpacity: 0,\n        }),\n        config: springConfig,\n        immediate: !animate,\n        initial: animate ? undefined : null,\n    })\n\n    return totalsTransition((style, barTotal) => (\n        <animated.text\n            key={barTotal.key}\n            x={style.x}\n            y={style.y}\n            fillOpacity={style.labelOpacity}\n            style={{\n                ...theme.labels.text,\n                pointerEvents: 'none',\n                fill: theme.text.fill,\n            }}\n            fontWeight=\"bold\"\n            fontSize={theme.labels.text.fontSize}\n            fontFamily={theme.labels.text.fontFamily}\n            textAnchor={layout === 'vertical' ? 'middle' : 'start'}\n            alignmentBaseline={layout === 'vertical' ? 'alphabetic' : 'middle'}\n        >\n            {barTotal.formattedValue}\n        </animated.text>\n    ))\n}\n", "import { Axes, Grid } from '@nivo/axes'\nimport {\n    CartesianMarkers,\n    Container,\n    SvgWrapper,\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    useMotionConfig,\n} from '@nivo/core'\nimport { useTransition } from '@react-spring/web'\nimport { Fragment, ReactNode, createElement, useMemo } from 'react'\nimport { BarAnnotations } from './BarAnnotations'\nimport { BarLegends } from './BarLegends'\nimport { useBar } from './hooks'\nimport { svgDefaultProps } from './props'\nimport {\n    BarCustomLayerProps,\n    BarDatum,\n    BarLayer,\n    BarLayerId,\n    BarSvgProps,\n    ComputedBarDatumWithValue,\n} from './types'\nimport { BarTotals } from './BarTotals'\n\ntype InnerBarProps<RawDatum extends BarDatum> = Omit<\n    BarSvgProps<RawDatum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerBar = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    layers = svgDefaultProps.layers as readonly BarLayer<RawDatum>[],\n    barComponent = svgDefaultProps.barComponent,\n\n    enableLabel = svgDefaultProps.enableLabel,\n    label,\n    labelSkipWidth = svgDefaultProps.labelSkipWidth,\n    labelSkipHeight = svgDefaultProps.labelSkipHeight,\n    labelTextColor,\n\n    markers = svgDefaultProps.markers,\n\n    colorBy,\n    colors,\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n    borderRadius = svgDefaultProps.borderRadius,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = svgDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = svgDefaultProps.isInteractive,\n    tooltip = svgDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    isFocusable = svgDefaultProps.isFocusable,\n    barAriaLabel,\n    barAriaLabelledBy,\n    barAriaDescribedBy,\n\n    initialHiddenIds,\n\n    enableTotals = svgDefaultProps.enableTotals,\n    totalsOffset = svgDefaultProps.totalsOffset,\n}: InnerBarProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        toggleSerie,\n        legendsWithData,\n        barTotals,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n        initialHiddenIds,\n        totalsOffset,\n    })\n\n    const transition = useTransition<\n        ComputedBarDatumWithValue<RawDatum>,\n        {\n            borderColor: string\n            color: string\n            height: number\n            labelColor: string\n            labelOpacity: number\n            labelX: number\n            labelY: number\n            opacity: number\n            transform: string\n            width: number\n        }\n    >(barsWithValue, {\n        keys: bar => bar.key,\n        from: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        enter: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        update: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        leave: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            labelX: bar.width / 2,\n            labelY: 0,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      labelX: 0,\n                      labelY: bar.height / 2,\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        config: springConfig,\n        immediate: !animate,\n        initial: animate ? undefined : null,\n    })\n\n    const commonProps = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getTooltipLabel,\n            tooltip,\n            isFocusable,\n            ariaLabel: barAriaLabel,\n            ariaLabelledBy: barAriaLabelledBy,\n            ariaDescribedBy: barAriaDescribedBy,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            getTooltipLabel,\n            isInteractive,\n            labelSkipHeight,\n            labelSkipWidth,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            tooltip,\n            isFocusable,\n            barAriaLabel,\n            barAriaLabelledBy,\n            barAriaDescribedBy,\n        ]\n    )\n\n    const boundDefs = bindDefs(defs, bars, fill, {\n        dataKey: 'data',\n        targetKey: 'data.fill',\n    })\n\n    const layerById: Record<BarLayerId, ReactNode> = {\n        annotations: null,\n        axes: null,\n        bars: null,\n        grid: null,\n        legends: null,\n        markers: null,\n        totals: null,\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <BarAnnotations key=\"annotations\" bars={bars} annotations={annotations} />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('bars')) {\n        layerById.bars = (\n            <Fragment key=\"bars\">\n                {transition((style, bar) =>\n                    createElement(barComponent, {\n                        ...commonProps,\n                        bar,\n                        style,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                        label: getLabel(bar.data),\n                    })\n                )}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <BarLegends\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                legends={legendsWithData}\n                toggleSerie={toggleSerie}\n            />\n        )\n    }\n\n    if (layers.includes('markers')) {\n        layerById.markers = (\n            <CartesianMarkers<number | string, number>\n                key=\"markers\"\n                markers={markers as any[]}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale as (v: number | string) => number}\n                yScale={yScale as (v: number) => number}\n            />\n        )\n    }\n\n    if (layers.includes('totals') && enableTotals) {\n        layerById.totals = (\n            <BarTotals\n                key=\"totals\"\n                data={barTotals}\n                springConfig={springConfig}\n                animate={animate}\n                layout={layout}\n            />\n        )\n    }\n\n    const layerContext: BarCustomLayerProps<RawDatum> = useMemo(\n        () => ({\n            ...commonProps,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendData: legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n        }),\n        [\n            commonProps,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n        ]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n            isFocusable={isFocusable}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Bar = <RawDatum extends BarDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: BarSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerBar<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n", "import {\n    BarCanvasCustomLayerProps,\n    BarCanvasLayer,\n    BarCanvasProps,\n    BarCommonProps,\n    BarDatum,\n    ComputedBarDatum,\n} from './types'\nimport {\n    CompleteTheme,\n    Container,\n    Margin,\n    getRelativeCursor,\n    isCursorInRect,\n    useDimensions,\n    useTheme,\n    useValueFormatter,\n} from '@nivo/core'\nimport {\n    ForwardedRef,\n    createElement,\n    forwardRef,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n} from 'react'\nimport { canvasDefaultProps } from './props'\nimport {\n    renderAnnotationsToCanvas,\n    useAnnotations,\n    useComputedAnnotations,\n} from '@nivo/annotations'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useBar } from './hooks'\nimport { BarTotalsData } from './compute/totals'\n\ntype InnerBarCanvasProps<RawDatum extends BarDatum> = Omit<\n    BarCanvasProps<RawDatum>,\n    'renderWrapper' | 'theme'\n> & {\n    canvasRef: ForwardedRef<HTMLCanvasElement>\n}\n\nconst findBarUnderCursor = <RawDatum,>(\n    nodes: ComputedBarDatum<RawDatum>[],\n    margin: Margin,\n    x: number,\n    y: number\n) =>\n    nodes.find(node =>\n        isCursorInRect(node.x + margin.left, node.y + margin.top, node.width, node.height, x, y)\n    )\n\nconst isNumber = (value: unknown): value is number => typeof value === 'number'\n\nfunction renderTotalsToCanvas<RawDatum extends BarDatum>(\n    ctx: CanvasRenderingContext2D,\n    barTotals: BarTotalsData[],\n    theme: CompleteTheme,\n    layout: BarCommonProps<RawDatum>['layout'] = canvasDefaultProps.layout\n) {\n    ctx.fillStyle = theme.text.fill\n    ctx.font = `bold ${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n    ctx.textBaseline = layout === 'vertical' ? 'alphabetic' : 'middle'\n    ctx.textAlign = layout === 'vertical' ? 'center' : 'start'\n\n    barTotals.forEach(barTotal => {\n        ctx.fillText(barTotal.formattedValue, barTotal.x, barTotal.y)\n    })\n}\n\nconst InnerBarCanvas = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    enableGridX = canvasDefaultProps.enableGridX,\n    enableGridY = canvasDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    layers = canvasDefaultProps.layers as BarCanvasLayer<RawDatum>[],\n    renderBar = (\n        ctx,\n        {\n            bar: { color, height, width, x, y },\n\n            borderColor,\n            borderRadius,\n            borderWidth,\n            label,\n            labelColor,\n            shouldRenderLabel,\n        }\n    ) => {\n        ctx.fillStyle = color\n\n        if (borderWidth > 0) {\n            ctx.strokeStyle = borderColor\n            ctx.lineWidth = borderWidth\n        }\n\n        ctx.beginPath()\n\n        if (borderRadius > 0) {\n            const radius = Math.min(borderRadius, height)\n\n            ctx.moveTo(x + radius, y)\n            ctx.lineTo(x + width - radius, y)\n            ctx.quadraticCurveTo(x + width, y, x + width, y + radius)\n            ctx.lineTo(x + width, y + height - radius)\n            ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height)\n            ctx.lineTo(x + radius, y + height)\n            ctx.quadraticCurveTo(x, y + height, x, y + height - radius)\n            ctx.lineTo(x, y + radius)\n            ctx.quadraticCurveTo(x, y, x + radius, y)\n            ctx.closePath()\n        } else {\n            ctx.rect(x, y, width, height)\n        }\n\n        ctx.fill()\n\n        if (borderWidth > 0) {\n            ctx.stroke()\n        }\n\n        if (shouldRenderLabel) {\n            ctx.textBaseline = 'middle'\n            ctx.textAlign = 'center'\n            ctx.fillStyle = labelColor\n            ctx.fillText(label, x + width / 2, y + height / 2)\n        }\n    },\n\n    enableLabel = canvasDefaultProps.enableLabel,\n    label,\n    labelSkipWidth = canvasDefaultProps.labelSkipWidth,\n    labelSkipHeight = canvasDefaultProps.labelSkipHeight,\n    labelTextColor,\n\n    colorBy,\n    colors,\n    borderRadius = canvasDefaultProps.borderRadius,\n    borderWidth = canvasDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = canvasDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = canvasDefaultProps.isInteractive,\n    tooltip = canvasDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    pixelRatio = canvasDefaultProps.pixelRatio,\n\n    canvasRef,\n\n    enableTotals = canvasDefaultProps.enableTotals,\n    totalsOffset = canvasDefaultProps.totalsOffset,\n}: InnerBarCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const theme = useTheme()\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        legendsWithData,\n        barTotals,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n        totalsOffset,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    // Using any because return type isn't correct\n    const boundAnnotations: any = useComputedAnnotations({\n        annotations: useAnnotations({\n            data: bars,\n            annotations,\n            getPosition: node => ({\n                x: node.x,\n                y: node.y,\n            }),\n            getDimensions: ({ width, height }) => ({\n                width,\n                height,\n                size: Math.max(width, height),\n            }),\n        }),\n    })\n\n    // We use `any` here until we can figure out the best way to type xScale/yScale\n    const layerContext: BarCanvasCustomLayerProps<RawDatum> = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            isInteractive,\n            isFocusable: false,\n            labelSkipWidth,\n            labelSkipHeight,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendData: legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n        ]\n    )\n\n    const formatValue = useValueFormatter(valueFormat)\n\n    useEffect(() => {\n        const ctx = canvasEl.current?.getContext('2d')\n\n        if (!canvasEl.current) return\n        if (!ctx) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                if (isNumber(theme.grid.line.strokeWidth) && theme.grid.line.strokeWidth > 0) {\n                    ctx.lineWidth = theme.grid.line.strokeWidth\n                    ctx.strokeStyle = theme.grid.line.stroke as string\n\n                    if (enableGridX) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width: innerWidth,\n                            height: innerHeight,\n                            scale: xScale,\n                            axis: 'x',\n                            values: gridXValues,\n                        })\n                    }\n\n                    if (enableGridY) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width: innerWidth,\n                            height: innerHeight,\n                            scale: yScale,\n                            axis: 'y',\n                            values: gridYValues,\n                        })\n                    }\n                }\n            } else if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale: xScale,\n                    yScale: yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            } else if (layer === 'bars') {\n                barsWithValue.forEach(bar => {\n                    renderBar(ctx, {\n                        bar,\n                        borderColor: getBorderColor(bar) as string,\n                        borderRadius,\n                        borderWidth,\n                        label: getLabel(bar.data),\n                        labelColor: getLabelColor(bar) as string,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                    })\n                })\n            } else if (layer === 'legends') {\n                legendsWithData.forEach(([legend, data]) => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas(ctx, { annotations: boundAnnotations, theme })\n            } else if (layer === 'totals' && enableTotals) {\n                renderTotalsToCanvas(ctx, barTotals, theme, layout)\n            } else if (typeof layer === 'function') {\n                layer(ctx, layerContext)\n            }\n        })\n\n        ctx.save()\n    }, [\n        axisBottom,\n        axisLeft,\n        axisRight,\n        axisTop,\n        barsWithValue,\n        borderRadius,\n        borderWidth,\n        boundAnnotations,\n        enableGridX,\n        enableGridY,\n        getBorderColor,\n        getLabel,\n        getLabelColor,\n        gridXValues,\n        gridYValues,\n        groupMode,\n        height,\n        innerHeight,\n        innerWidth,\n        layerContext,\n        layers,\n        layout,\n        legendsWithData,\n        margin.left,\n        margin.top,\n        outerHeight,\n        outerWidth,\n        pixelRatio,\n        renderBar,\n        xScale,\n        yScale,\n        reverse,\n        shouldRenderBarLabel,\n        theme,\n        width,\n        barTotals,\n        enableTotals,\n        formatValue,\n    ])\n\n    const handleMouseHover = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                showTooltipFromEvent(\n                    createElement(tooltip, {\n                        ...bar.data,\n                        color: bar.color,\n                        label: bar.label,\n                        value: Number(bar.data.value),\n                    }),\n                    event\n                )\n\n                if (event.type === 'mouseenter') {\n                    onMouseEnter?.(bar.data, event)\n                }\n            } else {\n                hideTooltip()\n            }\n        },\n        [hideTooltip, margin, onMouseEnter, bars, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            hideTooltip()\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar) {\n                onMouseLeave?.(bar.data, event)\n            }\n        },\n        [hideTooltip, margin, onMouseLeave, bars]\n    )\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                onClick?.({ ...bar.data, color: bar.color }, event)\n            }\n        },\n        [margin, onClick, bars]\n    )\n\n    return (\n        <canvas\n            ref={canvas => {\n                canvasEl.current = canvas\n                if (canvasRef && 'current' in canvasRef) canvasRef.current = canvas\n            }}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const BarCanvas = forwardRef(\n    <RawDatum extends BarDatum>(\n        { isInteractive, renderWrapper, theme, ...props }: BarCanvasProps<RawDatum>,\n        ref: ForwardedRef<HTMLCanvasElement>\n    ) => (\n        <Container {...{ isInteractive, renderWrapper, theme }} animate={false}>\n            <InnerBarCanvas<RawDatum> {...props} canvasRef={ref} />\n        </Container>\n    )\n)\n", "import { Bar } from './Bar'\nimport { BarDatum, BarSvgProps } from './types'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport type ResponsiveBarSvgProps<RawDatum extends BarDatum> = Omit<\n    BarSvgProps<RawDatum>,\n    'height' | 'width'\n>\n\nexport const ResponsiveBar = <RawDatum extends BarDatum>(\n    props: ResponsiveBarSvgProps<RawDatum>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Bar<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n", "import { BarDatum, BarCanvasProps } from './types'\nimport { BarCanvas } from './BarCanvas'\nimport { ForwardedRef, forwardRef } from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport type ResponsiveBarCanvasProps<RawDatum extends BarDatum> = Omit<\n    BarCanvasProps<RawDatum>,\n    'height' | 'width'\n>\n\nexport const ResponsiveBarCanvas = forwardRef(function ResponsiveBarCanvas<\n    RawDatum extends BarDatum\n>(props: ResponsiveBarCanvasProps<RawDatum>, ref: ForwardedRef<HTMLCanvasElement>) {\n    return (\n        <ResponsiveWrapper>\n            {({ width, height }) => (\n                <BarCanvas\n                    width={width}\n                    height={height}\n                    {...(props as Omit<BarCanvasProps<BarDatum>, 'height' | 'width'>)}\n                    ref={ref}\n                />\n            )}\n        </ResponsiveWrapper>\n    )\n})\n"],
  "mappings": "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",
  "names": ["collection", "key", "defaultProps", "dotSize", "noteWidth", "noteTextOffset", "animate", "isSvgNote", "note", "noteType", "isValidElement", "isCanvasNote", "isCircleAnnotation", "annotationSpec", "type", "isDotAnnotation", "isRectAnnotation", "bindAnnotations", "_ref", "data", "annotations", "getPosition", "getDimensions", "reduce", "acc", "annotation", "offset", "concat", "filter", "match", "map", "datum", "position", "dimensions", "size", "width", "height", "_extends", "omit", "getLinkAngle", "sourceX", "sourceY", "targetX", "targetY", "angle", "Math", "atan2", "absoluteAngleDegrees", "radiansToDegrees", "computeAnnotation", "computedNoteX", "computedNoteY", "x", "y", "noteX", "noteY", "_annotation$noteWidth", "_annotation$noteTextO", "isNumber", "abs", "Error", "computedX", "computedY", "positionFromAngle", "degreesToRadians", "eighth", "round", "textX", "noteLineX", "points", "text", "useAnnotations", "useMemo", "useComputedAnnotations", "_ref2", "computed", "useComputedAnnotation", "AnnotationNote", "theme", "useTheme", "_useMotionConfig", "useMotionConfig", "springConfig", "config", "animatedProps", "useSpring", "immediate", "createElement", "_jsxs", "_Fragment", "children", "outlineWidth", "_jsx", "animated", "style", "strokeLinejoin", "strokeWidth", "stroke", "outlineColor", "AnnotationLink", "_ref$isOutline", "isOutline", "path", "firstPoint", "slice", "animatedPath", "useAnimatedPath", "link", "strokeLinecap", "opacity", "outlineOpacity", "fill", "d", "CircleAnnotationOutline", "radius", "outline", "circle", "cx", "cy", "r", "DotAnnotationOutline", "_ref$size", "symbol", "RectAnnotationOutline", "_ref$borderRadius", "borderRadius", "rect", "rx", "ry", "Annotation", "drawPoints", "ctx", "forEach", "index", "moveTo", "lineTo", "renderAnnotationsToCanvas", "length", "save", "lineCap", "strokeStyle", "lineWidth", "beginPath", "arc", "PI", "fillStyle", "font", "fontSize", "fontFamily", "textAlign", "textBaseline", "lineJoin", "strokeText", "fillText", "restore", "BarAnnotations", "_ref", "bars", "annotations", "boundAnnotations", "useAnnotations", "data", "getPosition", "bar", "x", "width", "y", "height", "getDimensions", "_ref2", "size", "Math", "max", "_jsx", "_Fragment", "children", "map", "annotation", "i", "Annotation", "_extends", "BarLegends", "legends", "toggleSerie", "_legend$data", "legend", "BoxLegendSvg", "containerWidth", "containerHeight", "dataFrom", "undefined", "BarItem", "_data$fill", "_ref$bar", "_objectWithoutPropertiesLoose", "_excluded", "_ref$style", "style", "borderColor", "color", "labelColor", "labelOpacity", "labelX", "labelY", "transform", "borderRadius", "borderWidth", "label", "shouldRenderLabel", "isInteractive", "onClick", "onMouseEnter", "onMouseLeave", "tooltip", "isFocusable", "ariaLabel", "ariaLabelledBy", "ariaDescribedBy", "theme", "useTheme", "_useTooltip", "useTooltip", "showTooltipFromEvent", "showTooltipAt", "hideTooltip", "renderTooltip", "useMemo", "createElement", "handleClick", "useCallback", "event", "handleTooltip", "handleMouseEnter", "handleMouseLeave", "handleFocus", "absX", "absY", "handleBlur", "_jsxs", "animated", "g", "rect", "to", "value", "rx", "ry", "fill", "strokeWidth", "stroke", "focusable", "tabIndex", "onMouseMove", "onFocus", "onBlur", "text", "textAnchor", "dominantBaseline", "fillOpacity", "labels", "pointerEvents", "BarTooltip", "BasicTooltip", "id", "formattedValue", "enableChip", "defaultProps", "indexBy", "keys", "groupMode", "layout", "reverse", "minValue", "maxValue", "valueScale", "type", "indexScale", "round", "padding", "innerPadding", "axisBottom", "axisLeft", "enableGridX", "enableGridY", "enableLabel", "labelSkipWidth", "labelSkipHeight", "labelTextColor", "from", "colorBy", "colors", "scheme", "tooltipLabel", "datum", "indexValue", "initialHiddenIds", "markers", "enableTotals", "totalsOffset", "svgDefaultProps", "layers", "barComponent", "defs", "animate", "motionConfig", "role", "canvasDefaultProps", "pixelRatio", "window", "_window$devicePixelRa", "devicePixelRatio", "getIndexScale", "getIndex", "axis", "computeScale", "all", "min", "normalizeData", "item", "reduce", "acc", "key", "filterNullValues", "Object", "coerceValue", "Number", "gt", "other", "lt", "range", "start", "end", "Array", "repeat", "_", "index", "clampToZero", "generateVerticalGroupedBars", "barWidth", "yRef", "formatValue", "getColor", "getTooltipLabel", "_ref$innerPadding", "xScale", "yScale", "margin", "compare", "cleanedData", "forEach", "domain", "length", "_xScale", "d", "_yScale", "_coerceValue", "rawValue", "barHeight", "_yScale2", "barData", "hidden", "push", "left", "top", "generateHorizontalGroupedBars", "xRef", "_ref2$innerPadding", "_yScale3", "_xScale2", "_coerceValue2", "_xScale3", "generateGroupedBars", "_ref3", "_scale", "_ref3$padding", "_ref3$innerPadding", "indexScaleConfig", "_ref3$hiddenIds", "hiddenIds", "props", "filter", "includes", "_ref4", "otherAxis", "scaleSpec", "clampMin", "values", "entry", "concat", "k", "Boolean", "apply", "isFinite", "scale", "_ref5", "bandwidth", "params", "flattenDeep", "arr", "some", "isArray", "generateVerticalStackedBars", "stackedData", "stackedDataItem", "_getY", "generateHorizontalStackedBars", "_getX", "generateStackedBars", "array", "_ref4$padding", "_ref4$hiddenIds", "stack", "offset", "stackOffsetDiverging", "num", "_ref6", "getLegendData", "direction", "legendLabel", "getLegendLabel", "getPropertyAccessor", "uniqBy", "_bar$data$indexValue", "_bar$color2", "_bar$color", "updateTotalsByIndex", "totalsByIndex", "currentIndexValue", "get", "set", "updateTotalsPositivesByIndex", "totalsPositivesByIndex", "updateGreatestValueByIndex", "greatestValueByIndex", "currentGreatestValue", "updateNumberOfBarsByIndex", "numberOfBarsByIndex", "currentNumberOfBars", "useBar", "_ref$indexBy", "_ref$keys", "_ref$label", "_ref$tooltipLabel", "valueFormat", "_ref$colors", "_ref$colorBy", "_ref$borderColor", "_ref$labelTextColor", "_ref$groupMode", "_ref$layout", "_ref$reverse", "_ref$minValue", "_ref$maxValue", "_ref$padding", "_ref$valueScale", "_ref$indexScale", "_ref$initialHiddenIds", "_ref$enableLabel", "_ref$labelSkipWidth", "_ref$labelSkipHeight", "_ref$legends", "_ref$totalsOffset", "_useState", "useState", "setHiddenIds", "state", "indexOf", "usePropertyAccessor", "getLabel", "useValueFormatter", "useOrdinalColorScale", "getBorderColor", "useInheritedColor", "getLabelColor", "_generateBars", "barsWithValue", "shouldRenderBarLabel", "legendData", "find", "legendsWithData", "barTotals", "totals", "Map", "_bar$data", "totalsPositive", "xPosition", "yPosition", "animationOffset", "indexTotal", "_bar$data2", "greatestValue", "numberOfBars", "BarTotals", "springConfig", "useTransition", "barTotal", "enter", "update", "leave", "config", "immediate", "initial", "fontWeight", "fontSize", "fontFamily", "alignmentBaseline", "InnerBar", "partialMargin", "axisTop", "axisRight", "_ref$axisBottom", "_ref$axisLeft", "_ref$enableGridX", "_ref$enableGridY", "gridXValues", "gridYValues", "_ref$layers", "_ref$barComponent", "_ref$markers", "_ref$defs", "_ref$fill", "_ref$borderRadius", "_ref$borderWidth", "_ref$annotations", "_ref$isInteractive", "_ref$tooltip", "_ref$role", "_ref$isFocusable", "barAriaLabel", "barAriaLabelledBy", "barAriaDescribedBy", "_ref$enableTotals", "_useMotionConfig", "useMotionConfig", "_useDimensions", "useDimensions", "outerWidth", "outerHeight", "innerWidth", "innerHeight", "_useBar", "transition", "commonProps", "boundDefs", "bindDefs", "dataKey", "targetKey", "layerById", "axes", "grid", "Axes", "right", "bottom", "Fragment", "Grid", "xValues", "yValues", "CartesianMarkers", "layerContext", "SvgWrapper", "layer", "_layerById$layer", "Bar", "_ref2$isInteractive", "_ref2$animate", "_ref2$motionConfig", "renderWrapper", "otherProps", "Container", "findBarUnderCursor", "nodes", "node", "isCursorInRect", "InnerBarCanvas", "_ref$renderBar", "renderBar", "ctx", "_ref2$bar", "fillStyle", "strokeStyle", "lineWidth", "beginPath", "radius", "moveTo", "lineTo", "quadraticCurveTo", "closePath", "textBaseline", "textAlign", "fillText", "_ref$pixelRatio", "canvasRef", "canvasEl", "useRef", "useComputedAnnotations", "useEffect", "_canvasEl$current", "current", "getContext", "background", "fillRect", "translate", "line", "renderGridLinesToCanvas", "renderAxesToCanvas", "renderLegendToCanvas", "renderAnnotationsToCanvas", "font", "save", "handleMouseHover", "_getRelativeCursor", "getRelativeCursor", "_getRelativeCursor2", "_getRelativeCursor3", "ref", "canvas", "cursor", "BarCanvas", "forwardRef", "ResponsiveBar", "ResponsiveWrapper", "ResponsiveBarCanvas"]
}
