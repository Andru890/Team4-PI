{"version":3,"file":"nivo-line.cjs.js","sources":["../src/PointTooltip.js","../src/SliceTooltip.js","../src/props.js","../src/hooks.js","../src/Areas.js","../src/LinesItem.js","../src/Lines.js","../src/SlicesItem.js","../src/Slices.js","../src/Points.js","../src/Mesh.js","../src/Line.js","../src/LineCanvas.js","../src/ResponsiveLineCanvas.js","../src/ResponsiveLine.js"],"sourcesContent":["import { memo } from 'react'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nconst LinePointTooltip = ({ point }) => {\n    return (\n        <BasicTooltip\n            id={\n                <span>\n                    x: <strong>{point.data.xFormatted}</strong>, y:{' '}\n                    <strong>{point.data.yFormatted}</strong>\n                </span>\n            }\n            enableChip={true}\n            color={point.serieColor}\n        />\n    )\n}\n\nexport default memo(LinePointTooltip)\n","import { memo } from 'react'\nimport { useTheme } from '@nivo/core'\nimport { Chip, TableTooltip } from '@nivo/tooltip'\n\nconst SliceTooltip = ({ slice, axis }) => {\n    const theme = useTheme()\n    const otherAxis = axis === 'x' ? 'y' : 'x'\n\n    return (\n        <TableTooltip\n            rows={slice.points.map(point => [\n                <Chip key=\"chip\" color={point.serieColor} style={theme.tooltip.chip} />,\n                point.serieId,\n                <span key=\"value\" style={theme.tooltip.tableCellValue}>\n                    {point.data[`${otherAxis}Formatted`]}\n                </span>,\n            ])}\n        />\n    )\n}\n\nexport default memo(SliceTooltip)\n","import PointTooltip from './PointTooltip'\nimport SliceTooltip from './SliceTooltip'\n\nconst commonDefaultProps = {\n    curve: 'linear',\n\n    xScale: {\n        type: 'point',\n    },\n    yScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    },\n\n    layers: [\n        'grid',\n        'markers',\n        'axes',\n        'areas',\n        'crosshair',\n        'lines',\n        'points',\n        'slices',\n        'mesh',\n        'legends',\n    ],\n    axisBottom: {},\n    axisLeft: {},\n    enableGridX: true,\n    enableGridY: true,\n\n    enablePoints: true,\n    pointSize: 6,\n    pointColor: { from: 'color' },\n    pointBorderWidth: 0,\n    pointBorderColor: { theme: 'background' },\n    enablePointLabel: false,\n    pointLabel: 'yFormatted',\n\n    colors: { scheme: 'nivo' },\n    enableArea: false,\n    areaBaselineValue: 0,\n    areaOpacity: 0.2,\n    areaBlendMode: 'normal',\n    lineWidth: 2,\n\n    legends: [],\n\n    isInteractive: true,\n    tooltip: PointTooltip,\n    enableSlices: false,\n    debugSlices: false,\n    sliceTooltip: SliceTooltip,\n    debugMesh: false,\n    enableCrosshair: true,\n    crosshairType: 'bottom-left',\n}\n\nexport const LineDefaultProps = {\n    ...commonDefaultProps,\n    enablePointLabel: false,\n    useMesh: false,\n    enableTouchCrosshair: false,\n    animate: true,\n    motionConfig: 'gentle',\n    defs: [],\n    fill: [],\n    role: 'img',\n}\n\nexport const LineCanvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n","import { useCallback, useMemo, useState } from 'react'\nimport { area, line } from 'd3-shape'\nimport { curveFromProp, useTheme, useValueFormatter } from '@nivo/core'\nimport { useOrdinalColorScale, useInheritedColor } from '@nivo/colors'\nimport { computeXYScalesForSeries } from '@nivo/scales'\nimport uniqueId from 'lodash/uniqueId'\nimport { LineDefaultProps } from './props'\n\nexport const useLineGenerator = ({ curve }) => {\n    return useMemo(\n        () =>\n            line()\n                .defined(d => d.x !== null && d.y !== null)\n                .x(d => d.x)\n                .y(d => d.y)\n                .curve(curveFromProp(curve)),\n        [curve]\n    )\n}\n\nexport const useAreaGenerator = ({ curve, yScale, areaBaselineValue }) => {\n    return useMemo(() => {\n        return area()\n            .defined(d => d.x !== null && d.y !== null)\n            .x(d => d.x)\n            .y1(d => d.y)\n            .curve(curveFromProp(curve))\n            .y0(yScale(areaBaselineValue))\n    }, [curve, yScale, areaBaselineValue])\n}\n\nconst usePoints = ({ series, getPointColor, getPointBorderColor, formatX, formatY }) => {\n    return useMemo(() => {\n        return series.reduce((acc, serie) => {\n            return [\n                ...acc,\n                ...serie.data\n                    .filter(datum => datum.position.x !== null && datum.position.y !== null)\n                    .map((datum, i) => {\n                        const point = {\n                            id: `${serie.id}.${i}`,\n                            index: acc.length + i,\n                            serieId: serie.id,\n                            serieColor: serie.color,\n                            x: datum.position.x,\n                            y: datum.position.y,\n                        }\n                        point.color = getPointColor(serie)\n                        point.borderColor = getPointBorderColor(point)\n                        point.data = {\n                            ...datum.data,\n                            xFormatted: formatX(datum.data.x),\n                            yFormatted: formatY(datum.data.y),\n                        }\n\n                        return point\n                    }),\n            ]\n        }, [])\n    }, [series, getPointColor, getPointBorderColor, formatX, formatY])\n}\n\nexport const useSlices = ({ componentId, enableSlices, points, width, height }) => {\n    return useMemo(() => {\n        if (enableSlices === false) return []\n\n        if (enableSlices === 'x') {\n            const map = new Map()\n            points.forEach(point => {\n                if (point.data.x === null || point.data.y === null) return\n                if (!map.has(point.x)) map.set(point.x, [point])\n                else map.get(point.x).push(point)\n            })\n            return Array.from(map.entries())\n                .sort((a, b) => a[0] - b[0])\n                .map(([x, slicePoints], i, slices) => {\n                    const prevSlice = slices[i - 1]\n                    const nextSlice = slices[i + 1]\n\n                    let x0\n                    if (!prevSlice) x0 = x\n                    else x0 = x - (x - prevSlice[0]) / 2\n\n                    let sliceWidth\n                    if (!nextSlice) sliceWidth = width - x0\n                    else sliceWidth = x - x0 + (nextSlice[0] - x) / 2\n\n                    return {\n                        id: `slice:${componentId}:${x}`,\n                        x0,\n                        x,\n                        y0: 0,\n                        y: 0,\n                        width: sliceWidth,\n                        height,\n                        points: slicePoints.reverse(),\n                    }\n                })\n        } else if (enableSlices === 'y') {\n            const map = new Map()\n            points.forEach(point => {\n                if (point.data.x === null || point.data.y === null) return\n                if (!map.has(point.y)) map.set(point.y, [point])\n                else map.get(point.y).push(point)\n            })\n            return Array.from(map.entries())\n                .sort((a, b) => a[0] - b[0])\n                .map(([y, slicePoints], i, slices) => {\n                    const prevSlice = slices[i - 1]\n                    const nextSlice = slices[i + 1]\n\n                    let y0\n                    if (!prevSlice) y0 = y\n                    else y0 = y - (y - prevSlice[0]) / 2\n\n                    let sliceHeight\n                    if (!nextSlice) sliceHeight = height - y0\n                    else sliceHeight = y - y0 + (nextSlice[0] - y) / 2\n\n                    return {\n                        id: y,\n                        x0: 0,\n                        x: 0,\n                        y0,\n                        y,\n                        width,\n                        height: sliceHeight,\n                        points: slicePoints.reverse(),\n                    }\n                })\n        }\n    }, [componentId, enableSlices, height, points, width])\n}\n\nexport const LINE_UNIQUE_ID_PREFIX = 'line'\n\nexport const useLine = ({\n    data,\n    xScale: xScaleSpec = LineDefaultProps.xScale,\n    xFormat,\n    yScale: yScaleSpec = LineDefaultProps.yScale,\n    yFormat,\n    width,\n    height,\n    colors = LineDefaultProps.colors,\n    curve = LineDefaultProps.curve,\n    areaBaselineValue = LineDefaultProps.areaBaselineValue,\n    pointColor = LineDefaultProps.pointColor,\n    pointBorderColor = LineDefaultProps.pointBorderColor,\n    enableSlices = LineDefaultProps.enableSlicesTooltip,\n}) => {\n    const [componentId] = useState(uniqueId(LINE_UNIQUE_ID_PREFIX))\n    const formatX = useValueFormatter(xFormat)\n    const formatY = useValueFormatter(yFormat)\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const theme = useTheme()\n    const getPointColor = useInheritedColor(pointColor, theme)\n    const getPointBorderColor = useInheritedColor(pointBorderColor, theme)\n    const [hiddenIds, setHiddenIds] = useState([])\n\n    const {\n        xScale,\n        yScale,\n        series: rawSeries,\n    } = useMemo(\n        () =>\n            computeXYScalesForSeries(\n                data.filter(item => hiddenIds.indexOf(item.id) === -1),\n                xScaleSpec,\n                yScaleSpec,\n                width,\n                height\n            ),\n        [data, hiddenIds, xScaleSpec, yScaleSpec, width, height]\n    )\n\n    const { legendData, series } = useMemo(() => {\n        const dataWithColor = data.map(line => ({\n            id: line.id,\n            label: line.id,\n            color: getColor(line),\n        }))\n        const series = dataWithColor\n            .map(datum => ({\n                ...rawSeries.find(serie => serie.id === datum.id),\n                color: datum.color,\n            }))\n            .filter(item => Boolean(item.id))\n        const legendData = dataWithColor\n            .map(item => ({ ...item, hidden: !series.find(serie => serie.id === item.id) }))\n            .reverse()\n\n        return { legendData, series }\n    }, [data, rawSeries, getColor])\n\n    const toggleSerie = useCallback(id => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const points = usePoints({\n        series,\n        getPointColor,\n        getPointBorderColor,\n        formatX,\n        formatY,\n    })\n\n    const slices = useSlices({\n        componentId,\n        enableSlices,\n        points,\n        width,\n        height,\n    })\n\n    const lineGenerator = useLineGenerator({ curve })\n    const areaGenerator = useAreaGenerator({\n        curve,\n        yScale,\n        areaBaselineValue,\n    })\n\n    return {\n        legendData,\n        toggleSerie,\n        lineGenerator,\n        areaGenerator,\n        getColor,\n        series,\n        xScale,\n        yScale,\n        slices,\n        points,\n    }\n}\n","import { memo } from 'react'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useAnimatedPath, useMotionConfig } from '@nivo/core'\n\nconst AreaPath = ({ areaBlendMode, areaOpacity, color, fill, path }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedPath = useAnimatedPath(path)\n    const animatedProps = useSpring({\n        color,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.path\n            d={animatedPath}\n            fill={fill ? fill : animatedProps.color}\n            fillOpacity={areaOpacity}\n            strokeWidth={0}\n            style={{\n                mixBlendMode: areaBlendMode,\n            }}\n        />\n    )\n}\n\nconst Areas = ({ areaGenerator, areaOpacity, areaBlendMode, lines }) => {\n    const computedLines = lines.slice(0).reverse()\n\n    return (\n        <g>\n            {computedLines.map(line => (\n                <AreaPath\n                    key={line.id}\n                    path={areaGenerator(line.data.map(d => d.position))}\n                    {...{ areaOpacity, areaBlendMode, ...line }}\n                />\n            ))}\n        </g>\n    )\n}\n\nexport default memo(Areas)\n","import { memo, useMemo } from 'react'\nimport { animated } from '@react-spring/web'\nimport { useAnimatedPath } from '@nivo/core'\n\nconst LinesItem = ({ lineGenerator, points, color, thickness }) => {\n    const path = useMemo(() => lineGenerator(points), [lineGenerator, points])\n    const animatedPath = useAnimatedPath(path)\n\n    return <animated.path d={animatedPath} fill=\"none\" strokeWidth={thickness} stroke={color} />\n}\n\nexport default memo(LinesItem)\n","import { memo } from 'react'\nimport LinesItem from './LinesItem'\n\nconst Lines = ({ lines, lineGenerator, lineWidth }) => {\n    return lines\n        .slice(0)\n        .reverse()\n        .map(({ id, data, color }) => (\n            <LinesItem\n                key={id}\n                id={id}\n                points={data.map(d => d.position)}\n                lineGenerator={lineGenerator}\n                color={color}\n                thickness={lineWidth}\n            />\n        ))\n}\n\nexport default memo(Lines)\n","import { createElement, memo, useCallback } from 'react'\nimport { useTooltip } from '@nivo/tooltip'\n\nconst SlicesItem = ({\n    slice,\n    slices,\n    axis,\n    debug,\n    tooltip,\n    isCurrent,\n    setCurrent,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    onTouchStart,\n    onTouchMove,\n    onTouchEnd,\n}) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { slice, axis }), event, 'right')\n            setCurrent(slice)\n            onMouseEnter && onMouseEnter(slice, event)\n        },\n        [showTooltipFromEvent, tooltip, slice, axis, setCurrent, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { slice, axis }), event, 'right')\n            onMouseMove && onMouseMove(slice, event)\n        },\n        [showTooltipFromEvent, tooltip, slice, axis, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        event => {\n            hideTooltip()\n            setCurrent(null)\n            onMouseLeave && onMouseLeave(slice, event)\n        },\n        [hideTooltip, setCurrent, onMouseLeave, slice]\n    )\n\n    const handleClick = useCallback(\n        event => {\n            onClick && onClick(slice, event)\n        },\n        [slice, onClick]\n    )\n\n    const handeOnTouchStart = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { slice, axis }), event, 'right')\n            setCurrent(slice)\n            onTouchStart && onTouchStart(slice, event)\n        },\n        [axis, onTouchStart, setCurrent, showTooltipFromEvent, slice, tooltip]\n    )\n\n    const handeOnTouchMove = useCallback(\n        event => {\n            // This event will be locked to the element that was touched originally\n            // We find the element that is currently being \"hovered over\" by getting the element at the touch point\n            const touchPoint = event.touches[0]\n            const touchingElement = document.elementFromPoint(\n                touchPoint.clientX,\n                touchPoint.clientY\n            )\n            // Is this a nivo ref?\n            const touchingSliceId = touchingElement?.getAttribute('data-ref')\n            if (touchingSliceId) {\n                // Is this a slice for this graph?\n                const slice = slices.find(slice => slice.id === touchingSliceId)\n                if (slice) {\n                    showTooltipFromEvent(createElement(tooltip, { slice, axis }), event, 'right')\n                    setCurrent(slice)\n                }\n            }\n\n            // Note here, this will pass the original slice, not the one we found\n            // But this can be found with document.elementFromPoint()\n            onTouchMove && onTouchMove(slice, event)\n        },\n        [axis, onTouchMove, setCurrent, showTooltipFromEvent, slice, slices, tooltip]\n    )\n\n    const handleOnTouchEnd = useCallback(\n        event => {\n            hideTooltip()\n            setCurrent(null)\n            onTouchEnd && onTouchEnd(slice, event)\n        },\n        [hideTooltip, setCurrent, onTouchEnd, slice]\n    )\n\n    return (\n        <rect\n            x={slice.x0}\n            y={slice.y0}\n            width={slice.width}\n            height={slice.height}\n            stroke=\"red\"\n            strokeWidth={debug ? 1 : 0}\n            strokeOpacity={0.75}\n            fill=\"red\"\n            fillOpacity={isCurrent && debug ? 0.35 : 0}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n            onTouchStart={handeOnTouchStart}\n            onTouchMove={handeOnTouchMove}\n            onTouchEnd={handleOnTouchEnd}\n            data-ref={slice.id}\n        />\n    )\n}\n\nexport default memo(SlicesItem)\n","import { memo } from 'react'\nimport SlicesItem from './SlicesItem'\n\nconst Slices = ({\n    slices,\n    axis,\n    debug,\n    height,\n    tooltip,\n    current,\n    setCurrent,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    onTouchStart,\n    onTouchMove,\n    onTouchEnd,\n}) => {\n    return slices.map(slice => (\n        <SlicesItem\n            key={slice.id}\n            slice={slice}\n            slices={slices}\n            axis={axis}\n            debug={debug}\n            height={height}\n            tooltip={tooltip}\n            setCurrent={setCurrent}\n            isCurrent={current !== null && current.id === slice.id}\n            onMouseEnter={onMouseEnter}\n            onMouseMove={onMouseMove}\n            onMouseLeave={onMouseLeave}\n            onClick={onClick}\n            onTouchStart={onTouchStart}\n            onTouchMove={onTouchMove}\n            onTouchEnd={onTouchEnd}\n        />\n    ))\n}\n\nexport default memo(Slices)\n","import { memo } from 'react'\nimport { getLabelGenerator, DotsItem, useTheme } from '@nivo/core'\n\nconst Points = ({ points, symbol, size, borderWidth, enableLabel, label, labelYOffset }) => {\n    const theme = useTheme()\n    const getLabel = getLabelGenerator(label)\n\n    /**\n     * We reverse the `points` array so that points from the lower lines in stacked lines\n     * graph are drawn on top. See https://github.com/plouc/nivo/issues/1051.\n     */\n    const mappedPoints = points\n        .slice(0)\n        .reverse()\n        .map(point => {\n            const mappedPoint = {\n                id: point.id,\n                x: point.x,\n                y: point.y,\n                datum: point.data,\n                fill: point.color,\n                stroke: point.borderColor,\n                label: enableLabel ? getLabel(point) : null,\n            }\n\n            return mappedPoint\n        })\n\n    return (\n        <g>\n            {mappedPoints.map(point => (\n                <DotsItem\n                    key={point.id}\n                    x={point.x}\n                    y={point.y}\n                    datum={point.datum}\n                    symbol={symbol}\n                    size={size}\n                    color={point.fill}\n                    borderWidth={borderWidth}\n                    borderColor={point.stroke}\n                    label={point.label}\n                    labelYOffset={labelYOffset}\n                    theme={theme}\n                />\n            ))}\n        </g>\n    )\n}\n\nexport default memo(Points)\n","import { createElement, memo, useCallback } from 'react'\nimport { useTooltip } from '@nivo/tooltip'\nimport { Mesh as BaseMesh } from '@nivo/voronoi'\n\nconst Mesh = ({\n    points,\n    width,\n    height,\n    margin,\n    setCurrent,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    onTouchStart,\n    onTouchMove,\n    onTouchEnd,\n    tooltip,\n    debug,\n    enableTouchCrosshair,\n}) => {\n    const { showTooltipAt, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (point, event) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            onMouseEnter && onMouseEnter(point, event)\n        },\n        [showTooltipAt, tooltip, onMouseEnter, margin]\n    )\n\n    const handleMouseMove = useCallback(\n        (point, event) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            onMouseMove && onMouseMove(point, event)\n        },\n        [showTooltipAt, tooltip, margin.left, margin.top, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (point, event) => {\n            hideTooltip()\n            onMouseLeave && onMouseLeave(point, event)\n        },\n        [hideTooltip, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        (point, event) => {\n            onClick && onClick(point, event)\n        },\n        [onClick]\n    )\n\n    const handleTouchStart = useCallback(\n        (point, event) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            onTouchStart && onTouchStart(point, event)\n        },\n        [margin.left, margin.top, onTouchStart, showTooltipAt, tooltip]\n    )\n\n    const handleTouchMove = useCallback(\n        (point, event) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            onTouchMove && onTouchMove(point, event)\n        },\n        [margin.left, margin.top, onTouchMove, showTooltipAt, tooltip]\n    )\n\n    const handleTouchEnd = useCallback(\n        (point, event) => {\n            hideTooltip()\n            onTouchEnd && onTouchEnd(point, event)\n        },\n        [onTouchEnd, hideTooltip]\n    )\n\n    return (\n        <BaseMesh\n            nodes={points}\n            width={width}\n            height={height}\n            setCurrent={setCurrent}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n            onTouchStart={handleTouchStart}\n            onTouchMove={handleTouchMove}\n            onTouchEnd={handleTouchEnd}\n            enableTouchCrosshair={enableTouchCrosshair}\n            debug={debug}\n        />\n    )\n}\n\nexport default memo(Mesh)\n","import { Fragment, useState } from 'react'\nimport {\n    bindDefs,\n    withContainer,\n    useDimensions,\n    useTheme,\n    SvgWrapper,\n    CartesianMarkers,\n} from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { Axes, Grid } from '@nivo/axes'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { Crosshair } from '@nivo/tooltip'\nimport { useLine } from './hooks'\nimport Areas from './Areas'\nimport Lines from './Lines'\nimport Slices from './Slices'\nimport Points from './Points'\nimport Mesh from './Mesh'\nimport PointTooltip from './PointTooltip'\nimport SliceTooltip from './SliceTooltip'\n\nconst Line = props => {\n    const {\n        data,\n        xScale: xScaleSpec = { type: 'point' },\n        xFormat,\n        yScale: yScaleSpec = {\n            type: 'linear',\n            min: 0,\n            max: 'auto',\n        },\n        yFormat,\n        layers = [\n            'grid',\n            'markers',\n            'axes',\n            'areas',\n            'crosshair',\n            'lines',\n            'points',\n            'slices',\n            'mesh',\n            'legends',\n        ],\n        curve = 'linear',\n        areaBaselineValue = 0,\n\n        colors = { scheme: 'nivo' },\n\n        margin: partialMargin,\n        width,\n        height,\n\n        axisTop,\n        axisRight,\n        axisBottom = {},\n        axisLeft = {},\n        enableGridX = true,\n        enableGridY = true,\n        gridXValues,\n        gridYValues,\n\n        lineWidth = 2,\n        enableArea = false,\n        areaOpacity = 0.2,\n        areaBlendMode = 'normal',\n\n        enablePoints = true,\n        pointSymbol,\n        pointSize = 6,\n        pointColor = { from: 'color' },\n        pointBorderWidth = 0,\n        pointBorderColor = { theme: 'background' },\n        enablePointLabel = false,\n        pointLabel = 'data.yFormatted',\n        pointLabelYOffset,\n\n        defs = [],\n        fill = [],\n\n        markers,\n\n        legends = [],\n\n        isInteractive = true,\n\n        useMesh = false,\n        debugMesh = false,\n\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        onTouchStart,\n        onTouchMove,\n        onTouchEnd,\n\n        tooltip = PointTooltip,\n\n        enableSlices = false,\n        debugSlices = false,\n        sliceTooltip = SliceTooltip,\n\n        enableCrosshair = true,\n        crosshairType = 'bottom-left',\n        enableTouchCrosshair = false,\n\n        role = 'img',\n    } = props\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        legendData,\n        toggleSerie,\n        lineGenerator,\n        areaGenerator,\n        series,\n        xScale,\n        yScale,\n        slices,\n        points,\n    } = useLine({\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        curve,\n        areaBaselineValue,\n        pointColor,\n        pointBorderColor,\n        enableSlices,\n    })\n\n    const theme = useTheme()\n    const getPointColor = useInheritedColor(pointColor, theme)\n    const getPointBorderColor = useInheritedColor(pointBorderColor, theme)\n\n    const [currentPoint, setCurrentPoint] = useState(null)\n    const [currentSlice, setCurrentSlice] = useState(null)\n\n    const layerById = {\n        grid: (\n            <Grid\n                key=\"grid\"\n                theme={theme}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        ),\n        markers: (\n            <CartesianMarkers\n                key=\"markers\"\n                markers={markers}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale}\n                yScale={yScale}\n                theme={theme}\n            />\n        ),\n        axes: (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                theme={theme}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        ),\n        areas: null,\n        lines: (\n            <Lines key=\"lines\" lines={series} lineGenerator={lineGenerator} lineWidth={lineWidth} />\n        ),\n        slices: null,\n        points: null,\n        crosshair: null,\n        mesh: null,\n        legends: legends.map((legend, i) => (\n            <BoxLegendSvg\n                key={`legend.${i}`}\n                {...legend}\n                containerWidth={innerWidth}\n                containerHeight={innerHeight}\n                data={legend.data || legendData}\n                theme={theme}\n                toggleSerie={legend.toggleSerie ? toggleSerie : undefined}\n            />\n        )),\n    }\n\n    const boundDefs = bindDefs(defs, series, fill)\n\n    if (enableArea) {\n        layerById.areas = (\n            <Areas\n                key=\"areas\"\n                areaGenerator={areaGenerator}\n                areaOpacity={areaOpacity}\n                areaBlendMode={areaBlendMode}\n                lines={series}\n            />\n        )\n    }\n\n    if (isInteractive && enableSlices !== false) {\n        layerById.slices = (\n            <Slices\n                key=\"slices\"\n                slices={slices}\n                axis={enableSlices}\n                debug={debugSlices}\n                height={innerHeight}\n                tooltip={sliceTooltip}\n                current={currentSlice}\n                setCurrent={setCurrentSlice}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                onTouchStart={onTouchStart}\n                onTouchMove={onTouchMove}\n                onTouchEnd={onTouchEnd}\n            />\n        )\n    }\n\n    if (enablePoints) {\n        layerById.points = (\n            <Points\n                key=\"points\"\n                points={points}\n                symbol={pointSymbol}\n                size={pointSize}\n                color={getPointColor}\n                borderWidth={pointBorderWidth}\n                borderColor={getPointBorderColor}\n                enableLabel={enablePointLabel}\n                label={pointLabel}\n                labelYOffset={pointLabelYOffset}\n            />\n        )\n    }\n\n    if (isInteractive && enableCrosshair) {\n        if (currentPoint !== null) {\n            layerById.crosshair = (\n                <Crosshair\n                    key=\"crosshair\"\n                    width={innerWidth}\n                    height={innerHeight}\n                    x={currentPoint.x}\n                    y={currentPoint.y}\n                    type={crosshairType}\n                />\n            )\n        }\n        if (currentSlice !== null) {\n            layerById.crosshair = (\n                <Crosshair\n                    key=\"crosshair\"\n                    width={innerWidth}\n                    height={innerHeight}\n                    x={currentSlice.x}\n                    y={currentSlice.y}\n                    type={enableSlices}\n                />\n            )\n        }\n    }\n\n    if (isInteractive && useMesh && enableSlices === false) {\n        layerById.mesh = (\n            <Mesh\n                key=\"mesh\"\n                points={points}\n                width={innerWidth}\n                height={innerHeight}\n                margin={margin}\n                current={currentPoint}\n                setCurrent={setCurrentPoint}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                onTouchStart={onTouchStart}\n                onTouchMove={onTouchMove}\n                onTouchEnd={onTouchEnd}\n                tooltip={tooltip}\n                enableTouchCrosshair={enableTouchCrosshair}\n                debug={debugMesh}\n            />\n        )\n    }\n\n    return (\n        <SvgWrapper\n            defs={boundDefs}\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return (\n                        <Fragment key={i}>\n                            {layer({\n                                ...props,\n                                innerWidth,\n                                innerHeight,\n                                series,\n                                slices,\n                                points,\n                                xScale,\n                                yScale,\n                                lineGenerator,\n                                areaGenerator,\n                                currentPoint,\n                                setCurrentPoint,\n                                currentSlice,\n                                setCurrentSlice,\n                            })}\n                        </Fragment>\n                    )\n                }\n\n                return layerById[layer]\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport default withContainer(Line)\n","import { createElement, useRef, useEffect, useState, useCallback, forwardRef } from 'react'\nimport {\n    withContainer,\n    useDimensions,\n    useTheme,\n    getRelativeCursor,\n    isCursorInRect,\n} from '@nivo/core'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useVoronoiMesh, renderVoronoiToCanvas, renderVoronoiCellToCanvas } from '@nivo/voronoi'\nimport { useLine } from './hooks'\nimport PointTooltip from './PointTooltip'\n\nconst LineCanvas = props => {\n    const canvasEl = useRef(null)\n    const {\n        width,\n        height,\n        margin: partialMargin,\n        pixelRatio = typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n\n        data,\n        xScale: xScaleSpec = { type: 'point' },\n        xFormat,\n        yScale: yScaleSpec = {\n            type: 'linear',\n            min: 0,\n            max: 'auto',\n        },\n        yFormat,\n        curve = 'linear',\n\n        layers = [\n            'grid',\n            'markers',\n            'axes',\n            'areas',\n            'crosshair',\n            'lines',\n            'points',\n            'slices',\n            'mesh',\n            'legends',\n        ],\n\n        colors = { scheme: 'nivo' },\n        lineWidth = 2,\n\n        enableArea = false,\n        areaBaselineValue = 0,\n        areaOpacity = 0.2,\n\n        enablePoints = true,\n        pointSize = 6,\n        pointColor = { from: 'color' },\n        pointBorderWidth = 0,\n        pointBorderColor = { theme: 'background' },\n\n        enableGridX = true,\n        gridXValues,\n        enableGridY = true,\n        gridYValues,\n        axisTop,\n        axisRight,\n        axisBottom = {},\n        axisLeft = {},\n\n        legends = [],\n\n        isInteractive = true,\n        debugMesh = false,\n        //onMouseEnter,\n        //onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip = PointTooltip,\n        canvasRef,\n    } = props\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n    const theme = useTheme()\n    const [currentPoint, setCurrentPoint] = useState(null)\n\n    const { lineGenerator, areaGenerator, series, xScale, yScale, points } = useLine({\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        curve,\n        areaBaselineValue,\n        pointColor,\n        pointBorderColor,\n    })\n\n    const { delaunay, voronoi } = useVoronoiMesh({\n        points,\n        width: innerWidth,\n        height: innerHeight,\n        debug: debugMesh,\n    })\n\n    useEffect(() => {\n        if (canvasRef) {\n            canvasRef.current = canvasEl.current\n        }\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (typeof layer === 'function') {\n                layer({\n                    ctx,\n                    innerWidth,\n                    innerHeight,\n                    series,\n                    points,\n                    xScale,\n                    yScale,\n                    lineWidth,\n                    lineGenerator,\n                    areaGenerator,\n                    currentPoint,\n                    setCurrentPoint,\n                })\n            }\n\n            if (layer === 'grid' && theme.grid.line.strokeWidth > 0) {\n                ctx.lineWidth = theme.grid.line.strokeWidth\n                ctx.strokeStyle = theme.grid.line.stroke\n\n                enableGridX &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: xScale,\n                        axis: 'x',\n                        values: gridXValues,\n                    })\n\n                enableGridY &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: yScale,\n                        axis: 'y',\n                        values: gridYValues,\n                    })\n            }\n\n            if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale,\n                    yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            }\n\n            if (layer === 'areas' && enableArea === true) {\n                ctx.save()\n                ctx.globalAlpha = areaOpacity\n\n                areaGenerator.context(ctx)\n                for (let i = series.length - 1; i >= 0; i--) {\n                    ctx.fillStyle = series[i].color\n                    ctx.beginPath()\n                    areaGenerator(series[i].data.map(d => d.position))\n                    ctx.fill()\n                }\n\n                ctx.restore()\n            }\n\n            if (layer === 'lines') {\n                lineGenerator.context(ctx)\n                series.forEach(serie => {\n                    ctx.strokeStyle = serie.color\n                    ctx.lineWidth = lineWidth\n                    ctx.beginPath()\n                    lineGenerator(serie.data.map(d => d.position))\n                    ctx.stroke()\n                })\n            }\n\n            if (layer === 'points' && enablePoints === true && pointSize > 0) {\n                points.forEach(point => {\n                    ctx.fillStyle = point.color\n                    ctx.beginPath()\n                    ctx.arc(point.x, point.y, pointSize / 2, 0, 2 * Math.PI)\n                    ctx.fill()\n\n                    if (pointBorderWidth > 0) {\n                        ctx.strokeStyle = point.borderColor\n                        ctx.lineWidth = pointBorderWidth\n                        ctx.stroke()\n                    }\n                })\n            }\n\n            if (layer === 'mesh' && debugMesh === true) {\n                renderVoronoiToCanvas(ctx, voronoi)\n                if (currentPoint) {\n                    renderVoronoiCellToCanvas(ctx, voronoi, currentPoint.index)\n                }\n            }\n\n            if (layer === 'legends') {\n                const legendData = series\n                    .map(serie => ({\n                        id: serie.id,\n                        label: serie.id,\n                        color: serie.color,\n                    }))\n                    .reverse()\n\n                legends.forEach(legend => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data: legend.data || legendData,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            }\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        layers,\n        theme,\n        lineGenerator,\n        series,\n        xScale,\n        yScale,\n        enableGridX,\n        gridXValues,\n        enableGridY,\n        gridYValues,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        legends,\n        points,\n        enablePoints,\n        pointSize,\n        currentPoint,\n    ])\n\n    const getPointFromMouseEvent = useCallback(\n        event => {\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            if (!isCursorInRect(margin.left, margin.top, innerWidth, innerHeight, x, y)) return null\n\n            const pointIndex = delaunay.find(x - margin.left, y - margin.top)\n            return points[pointIndex]\n        },\n        [canvasEl, margin, innerWidth, innerHeight, delaunay]\n    )\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        event => {\n            const point = getPointFromMouseEvent(event)\n            setCurrentPoint(point)\n\n            if (point) {\n                showTooltipFromEvent(createElement(tooltip, { point }), event)\n            } else {\n                hideTooltip()\n            }\n        },\n        [getPointFromMouseEvent, setCurrentPoint, showTooltipFromEvent, hideTooltip, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        event => {\n            hideTooltip()\n            setCurrentPoint(null)\n            currentPoint && onMouseLeave && onMouseLeave(currentPoint, event)\n        },\n        [hideTooltip, setCurrentPoint, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        event => {\n            if (onClick) {\n                const point = getPointFromMouseEvent(event)\n                point && onClick(point, event)\n            }\n        },\n        [getPointFromMouseEvent, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nconst LineCanvasWithContainer = withContainer(LineCanvas)\n\nexport default forwardRef((props, ref) => <LineCanvasWithContainer {...props} canvasRef={ref} />)\n","import { forwardRef } from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport LineCanvas from './LineCanvas'\n\nconst ResponsiveLineCanvas = (props, ref) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <LineCanvas width={width} height={height} {...props} ref={ref} />}\n    </ResponsiveWrapper>\n)\n\nexport default forwardRef(ResponsiveLineCanvas)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport Line from './Line'\n\nconst ResponsiveLine = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Line width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveLine\n"],"names":["memo","_ref","point","_jsx","BasicTooltip","id","_jsxs","jsxs","children","jsx","data","xFormatted","yFormatted","enableChip","color","serieColor","slice","axis","theme","useTheme","otherAxis","TableTooltip","rows","points","map","Chip","style","tooltip","chip","serieId","tableCellValue","commonDefaultProps","curve","xScale","type","yScale","min","max","layers","axisBottom","axisLeft","enableGridX","enableGridY","enablePoints","pointSize","pointColor","from","pointBorderWidth","pointBorderColor","enablePointLabel","pointLabel","colors","scheme","enableArea","areaBaselineValue","areaOpacity","areaBlendMode","lineWidth","legends","isInteractive","PointTooltip","enableSlices","debugSlices","sliceTooltip","SliceTooltip","debugMesh","enableCrosshair","crosshairType","LineDefaultProps","_extends","useMesh","enableTouchCrosshair","animate","motionConfig","defs","fill","role","LineCanvasDefaultProps","pixelRatio","window","devicePixelRatio","useLineGenerator","useMemo","line","defined","d","x","y","curveFromProp","useAreaGenerator","_ref2","area","y1","y0","useSlices","_ref4","componentId","width","height","Map","forEach","has","get","push","set","Array","entries","sort","a","b","_ref5","i","slices","x0","sliceWidth","slicePoints","prevSlice","nextSlice","reverse","_ref6","sliceHeight","LINE_UNIQUE_ID_PREFIX","useLine","_ref7","_ref7$xScale","xScaleSpec","xFormat","_ref7$yScale","yScaleSpec","yFormat","_ref7$colors","_ref7$curve","_ref7$areaBaselineVal","_ref7$pointColor","_ref7$pointBorderColo","_ref7$enableSlices","enableSlicesTooltip","useState","uniqueId","formatX","useValueFormatter","formatY","getColor","useOrdinalColorScale","getPointColor","useInheritedColor","getPointBorderColor","_useState2","hiddenIds","setHiddenIds","_useMemo","computeXYScalesForSeries","filter","item","indexOf","rawSeries","series","_useMemo2","dataWithColor","label","datum","find","serie","Boolean","legendData","hidden","toggleSerie","useCallback","state","concat","_ref3","reduce","acc","position","index","length","borderColor","usePoints","lineGenerator","areaGenerator","AreaPath","path","_useMotionConfig","useMotionConfig","springConfig","config","animatedPath","useAnimatedPath","animatedProps","useSpring","immediate","animated","fillOpacity","strokeWidth","mixBlendMode","computedLines","lines","thickness","stroke","LinesItem","debug","isCurrent","setCurrent","onMouseEnter","onMouseMove","onMouseLeave","onClick","onTouchStart","onTouchMove","onTouchEnd","_useTooltip","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseEnter","event","createElement","handleMouseMove","handleMouseLeave","handleClick","handeOnTouchStart","handeOnTouchMove","touchPoint","touches","touchingElement","document","elementFromPoint","clientX","clientY","touchingSliceId","getAttribute","handleOnTouchEnd","strokeOpacity","current","SlicesItem","symbol","size","borderWidth","enableLabel","labelYOffset","getLabel","getLabelGenerator","mappedPoints","DotsItem","margin","showTooltipAt","left","top","handleTouchStart","handleTouchMove","handleTouchEnd","BaseMesh","nodes","withContainer","props","_props$xScale","_props$yScale","_props$layers","_props$curve","_props$areaBaselineVa","_props$colors","partialMargin","axisTop","axisRight","_props$axisBottom","_props$axisLeft","_props$enableGridX","_props$enableGridY","gridXValues","gridYValues","_props$lineWidth","_props$enableArea","_props$areaOpacity","_props$areaBlendMode","_props$enablePoints","pointSymbol","_props$pointSize","_props$pointColor","_props$pointBorderWid","_props$pointBorderCol","_props$enablePointLab","_props$pointLabel","pointLabelYOffset","_props$defs","_props$fill","markers","_props$legends","_props$isInteractive","_props$useMesh","_props$debugMesh","_props$tooltip","_props$enableSlices","_props$debugSlices","_props$sliceTooltip","_props$enableCrosshai","_props$crosshairType","_props$enableTouchCro","_props$role","_useDimensions","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","_useLine","_useState","currentPoint","setCurrentPoint","currentSlice","setCurrentSlice","layerById","grid","Grid","xValues","yValues","CartesianMarkers","axes","Axes","right","bottom","areas","Lines","crosshair","mesh","legend","BoxLegendSvg","containerWidth","containerHeight","undefined","boundDefs","bindDefs","Areas","Slices","Points","Crosshair","Mesh","SvgWrapper","layer","Fragment","LineCanvasWithContainer","canvasEl","useRef","_props$pixelRatio","canvasRef","_useVoronoiMesh","useVoronoiMesh","delaunay","voronoi","useEffect","ctx","getContext","scale","fillStyle","background","fillRect","translate","strokeStyle","renderGridLinesToCanvas","values","renderAxesToCanvas","save","globalAlpha","context","beginPath","restore","arc","Math","PI","renderVoronoiToCanvas","renderVoronoiCellToCanvas","renderLegendToCanvas","getPointFromMouseEvent","_getRelativeCursor","getRelativeCursor","isCursorInRect","pointIndex","handleMouseHover","ref","cursor","LineCanvas$1","forwardRef","ResponsiveWrapper","LineCanvas","Line"],"mappings":"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"}